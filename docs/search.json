[
  {
    "objectID": "sample.html#random-sampling",
    "href": "sample.html#random-sampling",
    "title": "Sampling",
    "section": "Random Sampling",
    "text": "Random Sampling"
  },
  {
    "objectID": "sample.html#probability-sampling",
    "href": "sample.html#probability-sampling",
    "title": "Sampling",
    "section": "Probability Sampling",
    "text": "Probability Sampling"
  },
  {
    "objectID": "sample.html#cluster-sampling",
    "href": "sample.html#cluster-sampling",
    "title": "Sampling",
    "section": "Cluster Sampling",
    "text": "Cluster Sampling"
  },
  {
    "objectID": "sample.html#snowball-sampling",
    "href": "sample.html#snowball-sampling",
    "title": "Sampling",
    "section": "Snowball Sampling",
    "text": "Snowball Sampling"
  },
  {
    "objectID": "sample.html#stratified-sampling",
    "href": "sample.html#stratified-sampling",
    "title": "Sampling",
    "section": "Stratified Sampling",
    "text": "Stratified Sampling"
  },
  {
    "objectID": "sample.html#quota-sampling",
    "href": "sample.html#quota-sampling",
    "title": "Sampling",
    "section": "Quota Sampling",
    "text": "Quota Sampling"
  },
  {
    "objectID": "presentations.html",
    "href": "presentations.html",
    "title": "Presentations",
    "section": "",
    "text": "October 24th, 2023: Farmingdale State College"
  },
  {
    "objectID": "baby.html",
    "href": "baby.html",
    "title": "Visualizations: Popularity of Baby Names",
    "section": "",
    "text": "Introduction\n\nWe will be using the babynames dataset to explore the dplyr and ggplot2 package.\nFirst, let us take a look at the babynames dataset.\n\nlibrary(stringr)\nlibrary(gganimate)\nlibrary(ggplot2)\nlibrary(babynames)\nlibrary(dplyr)\nlibrary(forcats)\n# Preview of what the dataset looks like \nhead(babynames)\n\n# A tibble: 6 × 5\n   year sex   name          n   prop\n  &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt;     &lt;int&gt;  &lt;dbl&gt;\n1  1880 F     Mary       7065 0.0724\n2  1880 F     Anna       2604 0.0267\n3  1880 F     Emma       2003 0.0205\n4  1880 F     Elizabeth  1939 0.0199\n5  1880 F     Minnie     1746 0.0179\n6  1880 F     Margaret   1578 0.0162\n\n\nThe table is structured in the following:\n\nYear: The year the name was recorded\nName: The assigned sex of the recorded individual\nn: The number of recorded people with the name\nprop: n divided by total number of applicants in that year, which means proportions are of people of that gender with that name born in that year 1\n\nThere are a myriad of questions we could ask here!\n\nHow many unique names are there?\nWhat is the most common name?\nDo Male or Females represent the majority of unique names?\nHow many unique names do each letter of the alphabet account for?\nHow many unique names are there?\n\nWe will need to use dplyr and distinct in order to find the number of unique names, or else we will run into an issue in which multiple instances of a name will be counted–thereby obscuring the actual number.\n\nbabynames |&gt; \n  # Get data ready to be sorted by name\n  group_by(name) |&gt; \n  # Count how many times each name appears\n  count()\n\n# A tibble: 97,310 × 2\n# Groups:   name [97,310]\n   name          n\n   &lt;chr&gt;     &lt;int&gt;\n 1 Aaban        10\n 2 Aabha         5\n 3 Aabid         2\n 4 Aabir         1\n 5 Aabriella     5\n 6 Aada          1\n 7 Aadam        26\n 8 Aadan        11\n 9 Aadarsh      17\n10 Aaden        18\n# ℹ 97,300 more rows\n\n\nYou can see from the n column that this is reporting mulitple instances of each name. This does inadvertedly answer one of our other questions:\nWhich name appears most often throughout the years from 1880-2017?\n\n\nbabynames |&gt; \n  group_by(name) |&gt; \n  # Sort the data from largest to smallest\n  count(sort=T)\n\n# A tibble: 97,310 × 2\n# Groups:   name [97,310]\n   name        n\n   &lt;chr&gt;   &lt;int&gt;\n 1 Francis   276\n 2 James     276\n 3 Jean      276\n 4 Jesse     276\n 5 Jessie    276\n 6 John      276\n 7 Johnnie   276\n 8 Joseph    276\n 9 Lee       276\n10 Leslie    276\n# ℹ 97,300 more rows\n\n\nIt is also helpful to understand that this represents the number of occurrences throughout the years, it does not tell us the associated n’s with each name, we will do that soon!\nBack to our original question: we need to remove all instances of a repeated name. We can do this with the distinct function.\ndistinct uses the following argurments:\n\ndata - What variable do you want to collect distinct values from?\n.keep_all(logical) - Can either be TRUE/T or FALSE/F which determines whether the other variables should remain.\n\nHere is an example using generated data first:\n\n# Take a sample of letters from the alphabet with replacement\nx &lt;- sample(letters,50,replace = T)\ny &lt;- round(runif(50,5,100))\n# Prevent the string constants from being treated as factors\nxy &lt;- data.frame(x,y,stringsAsFactors = F)\n# Find the distinct values\nxy |&gt; distinct(x)\n\n   x\n1  f\n2  o\n3  p\n4  x\n5  j\n6  c\n7  w\n8  a\n9  g\n10 l\n11 z\n12 b\n13 s\n14 e\n15 t\n16 q\n17 m\n18 d\n19 h\n20 i\n21 n\n22 r\n23 k\n\n\nYou will notice that we lost everything in the y column! We need to use the .keep_all() argument.\n\n# Take a sample of letters from the alphabet with replacement\nx &lt;- sample(letters,50,replace = T)\ny &lt;- round(runif(50,5,100))\n# Prevent the string constants from being treated as factors\nxy &lt;- data.frame(x,y,stringsAsFactors = F)\n# Find the distinct values\nxy |&gt; \n  distinct(x,.keep_all = T) |&gt; \n  group_by(x) |&gt; \n  arrange(x)\n\n# A tibble: 24 × 2\n# Groups:   x [24]\n   x         y\n   &lt;chr&gt; &lt;dbl&gt;\n 1 a        83\n 2 c        56\n 3 d        16\n 4 e        18\n 5 f        98\n 6 g        25\n 7 h        57\n 8 i        89\n 9 j        31\n10 k        96\n# ℹ 14 more rows\n\n\nSo now we will do the same with the babynames dataset to find the number of distinct names.\n\nbabynames |&gt; \n  # Remove all duplicated names, but keep the other variables\n  distinct(name,.keep_all = T)\n\n# A tibble: 97,310 × 5\n    year sex   name          n   prop\n   &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt;     &lt;int&gt;  &lt;dbl&gt;\n 1  1880 F     Mary       7065 0.0724\n 2  1880 F     Anna       2604 0.0267\n 3  1880 F     Emma       2003 0.0205\n 4  1880 F     Elizabeth  1939 0.0199\n 5  1880 F     Minnie     1746 0.0179\n 6  1880 F     Margaret   1578 0.0162\n 7  1880 F     Ida        1472 0.0151\n 8  1880 F     Alice      1414 0.0145\n 9  1880 F     Bertha     1320 0.0135\n10  1880 F     Sarah      1288 0.0132\n# ℹ 97,300 more rows\n\n\nAgain we see the same 97,310 we saw previously! This tells us that the function worked. Now let us try to answer the following question:\nHow many unique names do each letter of the alphabet account for?\n\nFor this we will need to create a new variable: sw, that represents the letter the name starts with.\nWe will do this using muatate and regular expressions, which are covered here. We will then need to repeat what we did by only returning the distinct names in the set.\nWhen the data is in this format, we will then group_by the new variable, sw and count.\n\nbabynames |&gt; \n  # Create new column that looks for the start of each name\n  mutate(sw=unlist(str_match_all(name,\"^.\"))) |&gt; \n  # Remove duplicate names\n  distinct(name,.keep_all = T) |&gt; \n  # Sort by the starting letter\n  group_by(sw) |&gt; \n  # Sort by largest to smallest\n  count(sort=T)\n\n# A tibble: 26 × 2\n# Groups:   sw [26]\n   sw        n\n   &lt;chr&gt; &lt;int&gt;\n 1 A     10292\n 2 S      7931\n 3 J      7817\n 4 M      7529\n 5 K      7283\n 6 D      6574\n 7 T      6278\n 8 L      5744\n 9 C      5731\n10 R      4429\n# ℹ 16 more rows\n\n\nAwesome! We can see that the letter A dominates the other letters.\nNow we can throw this into a graph:\n\nbabynames |&gt; \n  mutate(sw=unlist(str_match_all(name,\"^.\"))) |&gt; \n  distinct(name,.keep_all = T) |&gt; \n  group_by(sw) |&gt; \n  count(sort=T) |&gt; \n  # fct_rev will make it A-Z rather than Z-A\n  ggplot(aes(fct_rev(sw),n,fill=n)) +\n    # Use a bar chart\n    geom_bar(stat=\"identity\") +\n    # Flip for better view\n    coord_flip() +\n    # Fill based on category\n    scale_fill_continuous() +\n    # Super cool theme\n    theme_minimal() +\n    # Remove legend and axis ticks\n    theme(legend.position = \"none\",\n          axis.ticks = element_blank())+\n    # No need for axis labels, give title and caption\n    labs(x=\"\",y=\"\",\n         title=\"Number of Unique Names Per Letter\",\n         caption=\"(based on {babynames})\")\n\n\n\n\nCool!\nNow let us take a look at how many unique names are Male and how many are Female.\n\nbabynames |&gt; \n  mutate(sw=unlist(str_match_all(name,\"^.\"))) |&gt; \n  distinct(name,.keep_all = T) |&gt; \n  # Sort by sex for easy filtering\n  group_by(sex) |&gt; \n  # Get the number of each sex\n  count() |&gt; \n  ggplot(aes(sex,n,fill=sex)) +\n    geom_bar(stat=\"identity\") +\n    coord_flip() +\n    theme_minimal()+\n    theme(axis.ticks = element_blank(),\n          legend.position = \"bottom\")+\n    labs(x=\"Sex\",y=\"\",\n         title=\"Unique Names Attributed to Sex\",\n         caption=\"(based on babynames)\")+\n  # Manually fill colors\n  scale_fill_manual(values=c(\"#8700F9\",\"#00C4AA\"))\n\n\n\n\nWe can see that females have almost double the amount of unique names!\nWhile going through the dataset I noticed that even after removing duplicate names I was still seeing name doubles. I realized that this was because some exist have both male and female owners.\nThe arranging of this particular question was a little difficult for me so I went over to Reddit where a helpful user, PM_ME_CAREER_CHOICES was able to guide me in the right direction.\n\nbabynames |&gt; \n  distinct(sex,name,.keep_all = T) |&gt; \n  group_by(name) |&gt; \n  count() |&gt; \n  # If a name is truly unique it should be n = 1\n  filter(n ==2) \n\n# A tibble: 10,663 × 2\n# Groups:   name [10,663]\n   name        n\n   &lt;chr&gt;   &lt;int&gt;\n 1 Aaden       2\n 2 Aadi        2\n 3 Aadyn       2\n 4 Aalijah     2\n 5 Aaliyah     2\n 6 Aaliyan     2\n 7 Aamari      2\n 8 Aamir       2\n 9 Aaren       2\n10 Aareon      2\n# ℹ 10,653 more rows\n\n\nWe can see from this table that there are 10,763 names that have both male and female owners. Pretty cool!\nWhat name(s) has the most owners (dead and alive)\n\nNext we can take a look at what names have the most number of owners.\nWe will do this by summing up every occurence of a name and then sorting them to get each names total count.\n\nbabynames |&gt; \n    group_by(sex,name) |&gt; \n    # Create column that adds up every n instance of a name\n    summarise(Total=sum(n)) |&gt; \n    # Arrange in descending order the total number \n    arrange(desc(Total))\n\n`summarise()` has grouped output by 'sex'. You can override using the `.groups`\nargument.\n\n\n# A tibble: 107,973 × 3\n# Groups:   sex [2]\n   sex   name      Total\n   &lt;chr&gt; &lt;chr&gt;     &lt;int&gt;\n 1 M     James   5150472\n 2 M     John    5115466\n 3 M     Robert  4814815\n 4 M     Michael 4350824\n 5 F     Mary    4123200\n 6 M     William 4102604\n 7 M     David   3611329\n 8 M     Joseph  2603445\n 9 M     Richard 2563082\n10 M     Charles 2386048\n# ℹ 107,963 more rows\n\n\nLet’s see if we answered all of the questions!\n\n\nHow many unique names are there?\n\nThere are 97,310 unique names.\n\n\n\nWhat is the most common name?\n\nThe most common name, or the name with the most owners appears to be James–with a whopping 5,150,472!\n\n\n\nDo Male or Females represent the majority of unique names?\n\nFemales dominate the name ownership game with 61,832.\n\n\n\nHow many unique names do each letter of the alphabet account for?\n\nSince there are 26 values–I’ll point you in the direction of the graph!\n\n\n\nLet’s finish up with a animated graph using the gganimate package.\n\nbabynames |&gt; \n    # Choose Specifc Name\n    filter(name==\"David\") |&gt; \n    # Choose Sex (we know ~10% of names are M and F)\n    filter(sex==\"M\") |&gt; \n    # Notice how we group by name, so the line will follow\n    ggplot(aes(year,n,group=name,color=name)) +\n    # Plot the points\n    geom_point() +\n    # Plot a line to connect the points\n    geom_line() +\n    # Cool Theme\n    theme_minimal() +\n    labs(y=\"Total Count\",x=\"Year\",\n         title=paste(\"Popularity of the name David from 1880-2017\")) +\n    # Remove ticks and legend\n    theme(axis.ticks = element_blank(),\n        legend.title = element_blank()) +\n    # gganimate will use this to go from each year as its own graph\n  transition_reveal(year)\n\n`geom_line()`: Each group consists of only one observation.\nℹ Do you need to adjust the group aesthetic?\n`geom_line()`: Each group consists of only one observation.\nℹ Do you need to adjust the group aesthetic?\n\n\n\n\n\n\nbabynames |&gt; \n  filter(name==\"David\") |&gt; \n    # Choose Sex (we know ~10% of names are M and F)\n    filter(sex==\"M\") |&gt; \n    # Notice how we group by name, so the line will follow\n    ggplot(aes(year,n,group=name,color=name)) +\n    # Plot the points\n    geom_point() +\n    # Plot a line to connect the points\n    geom_line() +\n    # Cool Theme\n    theme_minimal()"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "R",
    "section": "",
    "text": "Basic Tutorials\nThis section is for tutorials that focus on introductory topics using R. In most cases, I wanted to do something and couldn’t figure out how and by scouring online I eventually found it and I hope to be able to replicate that for someone!\n\nBasic Operations\n\nIn this seminar, we will go over how to install, and use R-Studio. We will discuss the different classes of data (integer, numeric, string, matrix,and data frame), as well as how to perform simple math and store data in vectors and variables.\n\nIntroduction to Descriptive Statistics\n\nIn this seminar, we will go over how to create a data set to work with using the rnorm() and pnorm() functions. We will use the functions mean, median, and range to get measures of central tendency.\n\nString Manipulation using stringr and regular expressions.\n\nExtracting text from a string, determining the length of a string, as well as generating text according to a pattern. A brief introduction to regular expressions.\n\nPlotting using ggplot2\n\nA better alternative to the base plotting system found in R. You are given the ability to add several graphing geometries and modifying axis labels, etc.\n\n\nIn-Depth Tutorials\nThis section is devoted to going a bit more in depth: - Moving away from the base plotting system - Working exclusively with dplyr and the tidyverse ecosystem.\n\nVisualizations: stringr\n\nUsing the stringr::words, and stringr::sentences  datasets, we can see how to create new variables and examine the characteristics that make up these string oriented datasets using dplyr and ggplot2.\n\nVisualizations: babynames\n\nSeeing how unique names exist in the babynames dataset is easy when you combine it with dplyr and stringr. Additional layers in ggplot2 are shown which help make a readable, and pretty graph.\n\nVisualizations: TV Show Ratings\n\nUsing read_html and geom_tile to scrape relevant information from a specified website to create a dataset that lists the Season, Episode Name, and User Rating of a TV show to then create a heatmap of the ratings per season, per episode."
  },
  {
    "objectID": "apps.html",
    "href": "apps.html",
    "title": "Apps",
    "section": "",
    "text": "Shiny Apps with source code provided\nMusicMatchup - Find your next favorite artist\nACrossingCoffee - Who should you meet at Brewster’s?\nCreatePlaylist - Make a playlist based on recommended artists\nRandomAmericanDad - Watch a Random Episode of American Dad!"
  },
  {
    "objectID": "demonstration.html#roadmap",
    "href": "demonstration.html#roadmap",
    "title": "R & Quarto: Elevating Research Transparency",
    "section": "Roadmap",
    "text": "Roadmap\n\n\nResearch\nTeaching\nService\nDocumentation\nFun"
  },
  {
    "objectID": "demonstration.html#research",
    "href": "demonstration.html#research",
    "title": "R & Quarto: Elevating Research Transparency",
    "section": "Research",
    "text": "Research\n\n\nExample\nImport Data"
  },
  {
    "objectID": "demonstration.html#import-data",
    "href": "demonstration.html#import-data",
    "title": "R & Quarto: Elevating Research Transparency",
    "section": "Import Data",
    "text": "Import Data\n# Read and Clean Data\n mcu &lt;- read_excel(\"UpdatedMCdata.xlsx\")"
  },
  {
    "objectID": "demonstration.html#import-data-1",
    "href": "demonstration.html#import-data-1",
    "title": "R & Quarto: Elevating Research Transparency",
    "section": "Import Data",
    "text": "Import Data\n# Read and Clean Data\n mcu &lt;- read_excel(\"UpdatedMCdata.xlsx\")\n# Clean\n mcu_cln &lt;- \n  mcu %&gt;% \n  # Get participants who finished \n  filter(Finished == \"1\") %&gt;% \n  # Get participants who consented \n  filter(`Consent?` == \"1\") %&gt;% \n  # Remove unneeded columns \n  select(-DistributionChannel,-UserLanguage) %&gt;% \n  # Clean variable names \n  rename_with(~gsub(\" \",\"_\",.x)) %&gt;% \n  # Make Score Columns numeric \n  mutate_at(vars(SC0:SC14),as.numeric) %&gt;% \n  # Remove SC0 and replace with scale name \n  rename( \n    Morbid_Curiosity_Overall = SC0, \n    Mind = SC1, \n    Body = SC2, \n    Violence = SC3,\n    Paranormal = SC4, \n    Horror_Typology_Overall = SC5, \n    AJ = SC6, \n    WK = SC7, \n    DC = SC8, \n    Trait = SC9, \n    State_Pre = SC10, \n    Positive_Choice = SC11,\n    Negative_Choice = SC12,\n    PN_Choice = SC13, \n    State_Post = SC14) |&gt;\n  mutate(\n    # Divide all MC Total Score by 24\n    Morbid_Curiosity_Overall = Morbid_Curiosity_Overall/24,\n    # Divide all HT Total Score by 19\n    Horror_Typology_Overall = Horror_Typology_Overall/19 ) |&gt;\n    # Divide each MC Subscale Item by 6\n    mutate_at(vars(Mind:Paranormal),scale_six) |&gt; \n    # Divide each HT Subscale Item by 6\n    mutate_at(vars(AJ:DC),scale_seven)"
  },
  {
    "objectID": "demonstration.html#import-data-2",
    "href": "demonstration.html#import-data-2",
    "title": "R & Quarto: Elevating Research Transparency",
    "section": "Import Data",
    "text": "Import Data\n# Subset Scales\n mc_scale &lt;- \n  mcu_cln |&gt; \n  select(Morbid_Curiosity_Overall:State_Post)"
  },
  {
    "objectID": "demonstration.html#visualize-data",
    "href": "demonstration.html#visualize-data",
    "title": "R & Quarto: Elevating Research Transparency",
    "section": "Visualize Data",
    "text": "Visualize Data"
  },
  {
    "objectID": "demonstration.html#clean-data",
    "href": "demonstration.html#clean-data",
    "title": "R & Quarto: Elevating Research Transparency",
    "section": "Clean Data",
    "text": "Clean Data\n\n\nIdentify any nonstandard naming conventions (tOgglECase, Spaces in Name, etc.)\nClean with Regular Expressions 1 or janitor\n\n\nMaybe another time!"
  },
  {
    "objectID": "demonstration.html#name-cleaning",
    "href": "demonstration.html#name-cleaning",
    "title": "R & Quarto: Elevating Research Transparency",
    "section": "Name Cleaning",
    "text": "Name Cleaning\n\nBeforeAfter\n\n\nmcu |&gt; names()\n\n\n[1] \"StartDate\"             \"EndDate\"               \"Status\"               \n[4] \"Progress\"              \"Duration (in seconds)\" \"Finished\"             \n\n\n\n\nmcu |&gt; \nclean_names() |&gt; \n  names()\n\n\n[1] \"start_date\"          \"end_date\"            \"status\"             \n[4] \"progress\"            \"duration_in_seconds\" \"finished\""
  },
  {
    "objectID": "demonstration.html#exploratory-data-analysis",
    "href": "demonstration.html#exploratory-data-analysis",
    "title": "R & Quarto: Elevating Research Transparency",
    "section": "Exploratory Data Analysis",
    "text": "Exploratory Data Analysis\n\n\nVisualize Possible Relationships\n\n\nmcu_cln |&gt; \n  select(where(is.numeric)) |&gt; \n  pairs()"
  },
  {
    "objectID": "demonstration.html#exploratory-data-anlaysis",
    "href": "demonstration.html#exploratory-data-anlaysis",
    "title": "R & Quarto: Elevating Research Transparency",
    "section": "Exploratory Data Anlaysis",
    "text": "Exploratory Data Anlaysis\n\n\nScan for possible outliers\n\n\nmcu_cln |&gt; \n  select(where(is.numeric)) |&gt; \n  boxplot()"
  },
  {
    "objectID": "demonstration.html#teaching",
    "href": "demonstration.html#teaching",
    "title": "R & Quarto: Elevating Research Transparency",
    "section": "Teaching",
    "text": "Teaching\n\nExample\n\n\n\nInclude Interactivity\nMatch Formatting\n\\(M = \\Sigma\\frac{x}{n}\\)\nBuild Testing Materials"
  },
  {
    "objectID": "demonstration.html#service",
    "href": "demonstration.html#service",
    "title": "R & Quarto: Elevating Research Transparency",
    "section": "Service",
    "text": "Service\n\n\nEvaluate Data\n\nInternship Placements\n\nPresent Findings\nPresent Solutions\n\n\nEmphasize Certain Areas\nDirect Students to Specific Sites"
  },
  {
    "objectID": "demonstration.html#documentation",
    "href": "demonstration.html#documentation",
    "title": "R & Quarto: Elevating Research Transparency",
    "section": "Documentation",
    "text": "Documentation\n\n\nConvert ‘static’ Documents\n\n** Put Picture of PDF Manual Here **\n\nUpdate and Modernize"
  },
  {
    "objectID": "demonstration.html#fun",
    "href": "demonstration.html#fun",
    "title": "R & Quarto: Elevating Research Transparency",
    "section": "Fun",
    "text": "Fun\n\n\nData is fun!"
  },
  {
    "objectID": "vis1.html",
    "href": "vis1.html",
    "title": "Visualizations: {Stringr}",
    "section": "",
    "text": "Usingdplyr and the stringr::words package, we can demonstrate how to extract information from a dataset. Before we get into anything, let us take a look at a few of the characteristics of the stringr::words dataset.\nlibrary(stringr)\nlibrary(dplyr)\n\n\nAttaching package: 'dplyr'\n\n\nThe following objects are masked from 'package:stats':\n\n    filter, lag\n\n\nThe following objects are masked from 'package:base':\n\n    intersect, setdiff, setequal, union\n\nlibrary(ggplot2)\nlibrary(forcats)\nlibrary(tidytext)\nhead(stringr::words)\n\n[1] \"a\"        \"able\"     \"about\"    \"absolute\" \"accept\"   \"account\"\nwords |&gt; \n  summary()\n\n   Length     Class      Mode \n      980 character character\nA dataset with 980 words seems like a great tool to have!"
  },
  {
    "objectID": "vis1.html#stringrsentences",
    "href": "vis1.html#stringrsentences",
    "title": "Visualizations: {Stringr}",
    "section": "stringr::sentences",
    "text": "stringr::sentences\n\nsentences_t &lt;- \n  tibble(\n    line=1:length(sentences),\n    sentence=sentences)\n\nsentences_t_ns &lt;- \n  sentences_t %&gt;% \n  unnest_tokens(word,sentence) %&gt;% \n  group_by(word) %&gt;% \n  count(sort=T) %&gt;% \n  ungroup() %&gt;% \n  slice(1:20) \n\nsentences_t_ns %&gt;% \n  ggplot(aes(fct_reorder(word,n),n)) + \n    geom_point() + \n    geom_segment(aes(word,xend=word,n,yend=0)) +\n    coord_flip() +\n    theme_minimal() +\n    theme(axis.ticks = element_blank(),) +\n    labs(x=\"\",y=\"\",\n         title=\"Most Used Words: Stop Words Included\",\n         caption=\"(based on stringr::sentences\")\n\n\n\n\n\nsentences_t_s &lt;- \n  sentences_t %&gt;% \n  unnest_tokens(word,sentence) %&gt;% \n  anti_join(stop_words) %&gt;% \n  group_by(word) %&gt;% \n  count(sort=T) %&gt;% \n  ungroup() %&gt;% \n  slice(1:20) \n\nJoining with `by = join_by(word)`\n\n\n\nsentences_t_s &lt;- \n  sentences_t_s %&gt;% \n  ggplot(aes(fct_reorder(word,n),n)) + \n  geom_point() + \n  geom_segment(aes(word,xend=word,n,yend=0)) +\n  coord_flip() +\n  theme_minimal() +\n  theme(axis.ticks = element_blank(),) +\n  labs(x=\"\",y=\"\",\n       title=\"Most Used Non Stop_Words\",\n       caption=\"(based on stringr::sentences)\")\nsentences_t_s"
  },
  {
    "objectID": "research.html",
    "href": "research.html",
    "title": "Research",
    "section": "",
    "text": "My research focuses on the area of Social Psychology known as Person Perception.\nHere are a few projects I have worked on:\n\nMorbid Curiosity\nCaretaker Burden"
  },
  {
    "objectID": "gg.html",
    "href": "gg.html",
    "title": "Introduction to ggplot",
    "section": "",
    "text": "Introduction to ggplot2\n\nWhen I first started out with R, I only ever used the base plotting system. This was primarily because once I saw an example of a plot made with ggplot I was a little bit scared.\nAfter awhile I realized that ggplot was the way to go when it came to graphics. The goal of this is to hopefully assuage you to do the same!\nFirst, we will generate some data. I teach so we will use students and scores on a test and then look at how the students performed.\nSome of my colleagues use a 4 test grading scheme where each test is worth 25%. Let’s create a sample dataset with a class of 40 students and varying scores for each student as well as an average for each student.\n\nlibrary(ggplot2)\nlibrary(forcats)\nlibrary(stringr)\nlibrary(dplyr)\n\n\nAttaching package: 'dplyr'\n\n\nThe following objects are masked from 'package:stats':\n\n    filter, lag\n\n\nThe following objects are masked from 'package:base':\n\n    intersect, setdiff, setequal, union\n\ntest_data &lt;- data.frame(\n  Exam_1=round(runif(40,80,85)),\n  Exam_2=round(runif(40,75,100)),\n  Exam_3=round(runif(40,70,90)),\n  Exam_4=round(runif(40,60,100)))\n\ntest_data$FinalGrade &lt;- rowMeans(test_data)\n\nhead(test_data)\n\n  Exam_1 Exam_2 Exam_3 Exam_4 FinalGrade\n1     85     90     79     75      82.25\n2     81     95     88     66      82.50\n3     82     98     85     96      90.25\n4     81     95     78     92      86.50\n5     84     77     72     66      74.75\n6     84     85     87     78      83.50\n\n\nLet’s make a plot of the average score on each exam using the base plotting system.\n\n# Get the means of each column (exam)\ntest_means &lt;- colMeans(test_data)\n# Only use the first four exams\ntest_means &lt;- test_means[1:4]\n\nExam_1m=mean(test_data$Exam_1)\nExam_2m=mean(test_data$Exam_2)\n\nbarplot(c(test_means),\n        names.arg = c(\"Exam 1\",\"Exam 2\",\"Exam 3\",\"Exam 4\"),\n        col=c(\"darkblue\",\"darkgreen\",\"darkorange\",\"darkred\"),\n        density = 40,\n        ylim = c(0,100),\n        xlab=\"Exam Number\",\n        ylab=\"Score\",\n        main=\"Exam Score Averages\")\n\n\n\n\nThis does not look bad, but we could probably do better with ggplot.\nThe first thing to note is the syntax that ggplot uses.\nggplot(data,aes(x,y)) +   geom_() +   labs() +   theme_classic() +   theme()\nYou will see here that each line is followed by a + which indicates that a new layer is being added. Let’s try this out using our dataframe. I will do it the way you will see it most places, and then afterwards only do it the shortened way:\n\n# Use the means we created before and add two line numbers\ngg_test &lt;- data.frame(ExamNum=c(\"Exam 1\",\"Exam 2\",\"Exam 3\",\"Exam 4\"),\n  averages = test_means)\n\n\n# x-axis will be the test number, y will be the average \n# The color will change based on value of the average\nggplot(data=gg_test,aes(x=ExamNum,y=averages,fill=averages))+\n  # Tells R to plot the value associated with the x-axis\n  geom_bar(stat=\"identity\")+\n  # A nice theme \n  theme_minimal()+\n  # Specifies x and y axes labels and title for plot\n  labs(x=\"Exam Number\",y=\"Score\",\n       title=\"Exam Score Averages\") +\n  # Removes legend\n  theme(legend.position = \"none\")+\n  # Specify limits \n  ylim(0,100) +\n  # Adds values from the averages vector and vertically adjusts\n  geom_text(aes(label=averages,\n                vjust=-.3)) +\n  theme(\n    axis.text.y = element_blank(),\n    plot.title = element_text(hjust = .5, \n                              size = 15,\n                              face = \"bold\")\n  )\n\n\n\n\nI know that there is a lot going on in the example, but it just kind of looks nice, right?\nLet’s go back to the example and add some filtering. Let’s make a new column that determines whether or not a student passed or failed the test.\nWhen we first made the dataset we included a fifth column, FinalGrade that represents the students overall grade. We will then make a series of statements that will determine what the letter grade is, and then plot the result!\nWe will be using the %&gt;% or pipe operator to pass the contents of test_data into our arranging.\nWe will first use the mutate function which creates a new column based on the arguments you pass to it.\nWe will also be using case_when which acts as an ifelse statement but with multiple conditionals.\n\nThe basic structure is: case_when(variable=this~make it this)\n\n\n\ntest_data %&gt;% \n  mutate(LetterGrade=case_when(\n    FinalGrade&gt;=95~\"A\",\n    FinalGrade&gt;=90~\"A-\",\n    FinalGrade&gt;=87~\"B+\",\n    FinalGrade&gt;=84~\"B\",\n    FinalGrade&gt;=80~\"B-\",\n    FinalGrade&gt;=74~\"C+\",\n    FinalGrade&gt;=70~\"C\",\n    FinalGrade&gt;=67~\"D+\",\n    FinalGrade&gt;=64~\"D\",\n    FinalGrade&gt;=60~\"D-\",\n    FinalGrade&lt;60~\"F\"))\n\n   Exam_1 Exam_2 Exam_3 Exam_4 FinalGrade LetterGrade\n1      85     90     79     75      82.25          B-\n2      81     95     88     66      82.50          B-\n3      82     98     85     96      90.25          A-\n4      81     95     78     92      86.50           B\n5      84     77     72     66      74.75          C+\n6      84     85     87     78      83.50          B-\n7      84     98     78     89      87.25          B+\n8      82     75     74     72      75.75          C+\n9      82     76     70     75      75.75          C+\n10     81     79     79    100      84.75           B\n11     84     98     89     68      84.75           B\n12     83     98     74     70      81.25          B-\n13     82     85     83     78      82.00          B-\n14     82     89     87     90      87.00          B+\n15     81     96     81     67      81.25          B-\n16     84     78     73     91      81.50          B-\n17     83     98     85     87      88.25          B+\n18     82     93     90     97      90.50          A-\n19     85     95     87     74      85.25           B\n20     82     95     78     71      81.50          B-\n21     82     88     78     97      86.25           B\n22     84     90     83     61      79.50          C+\n23     80     98     71     89      84.50           B\n24     85     94     84     97      90.00          A-\n25     85     78     71     79      78.25          C+\n26     81     90     85     70      81.50          B-\n27     82     86     78     84      82.50          B-\n28     84     83     86     78      82.75          B-\n29     84     79     90     97      87.50          B+\n30     83     82     90     73      82.00          B-\n31     83     86     71     95      83.75          B-\n32     84     76     83     88      82.75          B-\n33     84     93     89     95      90.25          A-\n34     81     99     81     85      86.50           B\n35     85     97     74     71      81.75          B-\n36     82     97     75     80      83.50          B-\n37     84     95     83     79      85.25           B\n38     83     93     78     94      87.00          B+\n39     83     82     78     95      84.50           B\n40     84     96     74     78      83.00          B-\n\n\n\nfinal_grade &lt;- test_data %&gt;% \n  mutate(LetterGrade=case_when(\n    FinalGrade&gt;=95~\"A\",\n    FinalGrade&gt;=90~\"A-\",\n    FinalGrade&gt;=87~\"B+\",\n    FinalGrade&gt;=84~\"B\",\n    FinalGrade&gt;=80~\"B-\",\n    FinalGrade&gt;=74~\"C+\",\n    FinalGrade&gt;=70~\"C\",\n    FinalGrade&gt;=67~\"D+\",\n    FinalGrade&gt;=64~\"D\",\n    FinalGrade&gt;=60~\"D-\",\n    FinalGrade&lt;60~\"F\")) %&gt;% \n    group_by(LetterGrade) %&gt;% \n    count()\n\nfinal_grade\n\n# A tibble: 5 × 2\n# Groups:   LetterGrade [5]\n  LetterGrade     n\n  &lt;chr&gt;       &lt;int&gt;\n1 A-              4\n2 B               9\n3 B+              5\n4 B-             17\n5 C+              5\n\n\nOur students didn’t do particularly well, but that is to be expected when we control the range their grades can be in!\nNext, we will graph the data using ggplot, but this time we will pass the dataframe directly into the plot and remove the  x= and y= declarations\nWhen we graph the results the letter grades will be backwards so we will need to use fct_rev to reverse them.\n\nfinal_grade %&gt;% \n  # Place Grades on X axis and count on Y axis\n  # Color based on Letter Grade\n  ggplot(aes(fct_rev(LetterGrade),n,fill=LetterGrade)) +\n    geom_bar(stat=\"identity\") +\n    theme_minimal(base_size=12) +\n    labs(x=\"\",y=\"Count\",\n         title=\"Letter Grade Frequency\") +\n    # Flip the axes for better readability\n    coord_flip() +\n    # Remove the legend and the axis ticks\n    theme(legend.position =\"none\",\n          axis.ticks = element_blank()) +\n    # Add the count to the bars\n    geom_text(aes(label=n,\n                  hjust=-.08)) +\n  theme(\n    axis.text.x = element_blank()\n  )\n\n\n\n\nI’m not entirely sure, but I think I’m just addicted to bar charts–but that’s my problem!\nScatterplots\nWhen I was first learning R in graduate school the class was given a task to plot points but in different colors depending on what gender the points came from. In base plotting this requires the use of not only the plot function but also the points function. It is entirely doable, but ggplot just handles it better!\nLet’s generate some data where we have hypothetical participants take an experiment where their reaction time is measured as well as their mood is measured.\n\nscat_df &lt;- \n  data.frame(\n    Sex=sample(c(\"M\",\"F\"),100,replace = T),\n    RT=round(rnorm(100,800,150),2),\n    TestScore=c(round(runif(50,60,100)),\n                round(runif(50,40,90)))\n)\nscat_df\n\n    Sex      RT TestScore\n1     F  783.76        65\n2     M  748.52        88\n3     F 1086.35        97\n4     F  607.07        69\n5     M  787.47        66\n6     F  755.86        67\n7     M 1138.92        87\n8     F  748.03        96\n9     M  692.54        73\n10    M  723.09        61\n11    M  796.21        61\n12    M  878.43        71\n13    M  495.05        93\n14    M  677.05        83\n15    M  707.04        82\n16    F  821.28        93\n17    F  986.18        67\n18    F  844.40        80\n19    M  856.35        93\n20    M  961.75        89\n21    M  828.84        88\n22    F  808.52        95\n23    F  969.01        90\n24    F  837.60        90\n25    F  770.97        95\n26    M  825.89        88\n27    M  635.74        76\n28    F  779.35        89\n29    M 1091.54        74\n30    M  644.66        99\n31    M  830.10        86\n32    F  545.27        72\n33    F  887.00        87\n34    M  768.17        89\n35    M  899.74        86\n36    F  708.03        63\n37    M  869.45        66\n38    M  874.11        92\n39    F  926.16        93\n40    F  732.59        87\n41    M  676.48        85\n42    M  616.78        70\n43    F  624.18        64\n44    M  741.68        93\n45    M  837.08        73\n46    M 1148.34        75\n47    M  895.80        72\n48    F  785.64        81\n49    F  762.02        89\n50    F  864.37        94\n51    F  976.96        83\n52    M  531.35        55\n53    F  852.96        44\n54    F  886.44        87\n55    F  766.33        50\n56    M  359.90        75\n57    M  698.73        68\n58    M  771.78        66\n59    F  641.29        42\n60    M  873.92        90\n61    F  945.16        68\n62    M  890.35        72\n63    F  987.15        59\n64    M  674.25        41\n65    M  671.00        56\n66    M  971.42        81\n67    F  818.94        61\n68    F  805.48        75\n69    F 1000.65        73\n70    M  837.28        63\n71    F  857.00        56\n72    M  864.27        73\n73    F  823.55        75\n74    F  748.93        52\n75    M 1014.93        59\n76    F  524.14        83\n77    M  868.12        78\n78    F  796.67        41\n79    F  976.34        88\n80    M  677.17        43\n81    M  783.76        59\n82    F  629.82        75\n83    M  715.54        62\n84    F  588.11        56\n85    M 1081.73        82\n86    M  746.14        72\n87    F  919.44        48\n88    M  693.11        79\n89    F  693.56        68\n90    F  944.57        86\n91    F 1252.93        75\n92    F  829.14        60\n93    F  706.27        48\n94    M  586.11        62\n95    F  755.53        82\n96    F  680.91        80\n97    M  946.54        82\n98    M  919.99        53\n99    F 1085.21        52\n100   F  628.44        82\n\n\nPlot Sex against RT and have the colors be linked to the Sex of the participant (point).\n\nscat_df %&gt;% \n  ggplot(aes(TestScore,RT,color=Sex)) +\n    geom_point(aes(shape=Sex)) +\n    theme_minimal() +\n    labs(x=\"Test Score\",\n         y=\"RT(ms)\",\n         title=\"RT and Test Scores\")\n\n\n\n\nClearly no real pattern is emerging from the data, but we can see a clear distinction between the different points.\nHeatmaps\nOne of my favorite geom’s to use is geom_tile which creates a heatmap style plot.\nLet’s create a fake TV show with fake episode titles and fake episode ratings.\n\nDave_TV &lt;- \n  data.frame(\n    Season=rep(paste0(\"S\",1:6),each=12),\n    Episode=as.factor(rep(1:12,6)),\n    Title=str_to_title(paste0(\"The \",\n                              sample(words,72),\" \",\n                              sample(words,72))),\n    Ratings=c(runif(60,7.8,9),runif(12,6,9)) |&gt; round(0),\n    stringsAsFactors = F)\n\nDave_TV\n\n   Season Episode                 Title Ratings\n1      S1       1    The Figure Special       8\n2      S1       2       The There Lunch       8\n3      S1       3        The Fit Create       8\n4      S1       4        The Moment But       8\n5      S1       5     The Sleep Section       9\n6      S1       6     The Happen Stairs       8\n7      S1       7   The Thirty Together       8\n8      S1       8      The Fly Especial       8\n9      S1       9      The Power Nation       8\n10     S1      10     The Positive Come       8\n11     S1      11     The Saturday Look       9\n12     S1      12      The Train Dinner       8\n13     S2       1      The Church Seven       9\n14     S2       2   The Question Charge       8\n15     S2       3   The Organize Market       8\n16     S2       4        The Sign First       8\n17     S2       5  The Finance Resource       8\n18     S2       6        The Both Hullo       9\n19     S2       7      The Language Dog       9\n20     S2       8     The Second Always       9\n21     S2       9        The Very Level       8\n22     S2      10        The Out Office       8\n23     S2      11         The County As       8\n24     S2      12     The Staff Obvious       8\n25     S3       1        The Wonder Low       8\n26     S3       2    The Advertise Even       8\n27     S3       3 The Difficult Present       8\n28     S3       4   The Perfect Account       8\n29     S3       5      The Confer Minus       9\n30     S3       6      The Public Floor       8\n31     S3       7         The Use Score       8\n32     S3       8 The Programme Various       9\n33     S3       9        The Fight Kill       8\n34     S3      10     The Thirteen Rate       8\n35     S3      11  The Necessary Double       9\n36     S3      12      The Quarter Rail       8\n37     S4       1    The Percent Manage       8\n38     S4       2    The Client General       8\n39     S4       3         The Egg Never       9\n40     S4       4     The Welcome Judge       9\n41     S4       5  The Appropriate Also       8\n42     S4       6             The Say A       8\n43     S4       7  The Under Particular       8\n44     S4       8     The Office Middle       8\n45     S4       9       The Chance They       8\n46     S4      10     The During Bother       8\n47     S4      11             The Go To       8\n48     S4      12       The Stick Story       8\n49     S5       1           The For Get       8\n50     S5       2    The Evidence Clean       9\n51     S5       3        The Some Equal       8\n52     S5       4       The Road Settle       8\n53     S5       5         The Offer Egg       9\n54     S5       6  The Transport Europe       9\n55     S5       7          The Each Odd       9\n56     S5       8         The Over Make       9\n57     S5       9 The Enough Television       9\n58     S5      10    The Consult Friday       8\n59     S5      11     The Clothe Reason       8\n60     S5      12      The Honest Jesus       8\n61     S6       1       The Price Pound       6\n62     S6       2      The General Side       8\n63     S6       3       The Call Assume       7\n64     S6       4           The Tie Yet       7\n65     S6       5    The Serious Church       7\n66     S6       6     The Term Minister       6\n67     S6       7            The We Six       7\n68     S6       8           The She Guy       7\n69     S6       9      The Though Thank       7\n70     S6      10       The Corner Meet       8\n71     S6      11       The Likely Door       9\n72     S6      12         The Sir Woman       7\n\n\nFirstly, I want to take a moment to see how truly excellent some of the episode titles are:\n\ntitle_samp &lt;- sample(Dave_TV$Title,10)\ntitle_samp\n\n [1] \"The Enough Television\" \"The Office Middle\"     \"The Fight Kill\"       \n [4] \"The Church Seven\"      \"The Term Minister\"     \"The Very Level\"       \n [7] \"The Clothe Reason\"     \"The Saturday Look\"     \"The Perfect Account\"  \n[10] \"The Evidence Clean\"   \n\n\nAnyways, now that our data is in the correct format we can plot it.\n\nDave_TV %&gt;% \n  ggplot(aes(Season,Episode,fill=Ratings)) +\n    geom_tile(size=1) +\n    theme_minimal() +\n    geom_text(aes(label=Ratings)) +\n    theme(axis.ticks = element_blank())+\n    scale_fill_gradient(low=\"yellow\",high=\"blue\")\n\nWarning: Using `size` aesthetic for lines was deprecated in ggplot2 3.4.0.\nℹ Please use `linewidth` instead.\n\n\n\n\n\nThere could be an entirely separate tutorial on just color choices in ggplot2.\nHere is one last iteration that uses conditional values to color each episode or tile.\n\ncols=c(\"Bad\"=\"red2\",\n       \"Garbage\" =\"darkblue\",\n       \"Great\" =\"darkgreen\",\n       \"Regular\"=\"darkorange\", \n       \"Good\" =\"gold\")\n\nDave_TV %&gt;% \n  mutate(Quality=case_when(\n      Ratings&lt;5.0 ~ \"Garbage\",\n      Ratings&lt;6.5 ~ \"Bad\",\n      Ratings&lt;7.5 ~ \"Regular\",\n      Ratings&lt;8.5 ~ \"Good\",\n      Ratings&lt;10 ~ \"Great\")) %&gt;% \n  ggplot(aes(Season,Episode,fill=Quality)) +\n    geom_tile(color=\"black\",size=.085) +\n    theme_minimal() +\n    geom_text(aes(label=Ratings)) +\n    theme(axis.ticks = element_blank()) +\n    scale_fill_manual(values=cols) +\n    labs(x=\"\",y=\"\",\n        title=\"Dave TV Episode Ratings\",\n        caption=\"Data from IAmDb)\") +\n  theme(\n    plot.caption = element_text(face = \"italic\")\n  )\n\n\n\n\nSo there you have it, a very brief introduction to ggplot. As my own projects expand, I will include new sections or add more examples here."
  },
  {
    "objectID": "courses.html",
    "href": "courses.html",
    "title": "Teaching",
    "section": "",
    "text": "I have taught three classes as a lab instructor:\n\nStatistics for the Psychological Sciences - SPSS-Approach\nExperimental Psychology\nStatistics for the Psychological Sciences - R-Approach\n\nI am currently teaching three courses as a full instructor:\n\nIntroduction to Psychology\nResearch Methods\nSenior Project II - Applied Psychology\n\n\nTeaching Materials\nEntire Course in R"
  },
  {
    "objectID": "scrape.html",
    "href": "scrape.html",
    "title": "Webscraping",
    "section": "",
    "text": "Using dplyr and ggplot for Visualization\n\nlibrary(ggplot2)\nlibrary(stringr)\nlibrary(forcats)\nlibrary(gganimate)\nlibrary(dplyr)\nlibrary(tidytext)\nlibrary(plotly)\nlibrary(huxtable)\n\nI am still getting used to the idea of a few of these functions so if this seems all over the place, there is a reason for that!\nI came across this post on r/dataisbeautiful and I was instantly convinced to give it a shot!\nThe method I used was a little bit convoluted and hacky. What I am going to show here is how to read data off of a website and then show you how the data looks, and how to plot it in the way we would like.\nFurther down the line when I am more comfortable with the complex, I can make a more detailed tutorial.\nFor now, we will be downloading the file hosted here\n\n# First read in the csv \ndoctorwho &lt;- \n  read.csv(\"doctorwho_ratings.csv\")\n\n\nhead(doctorwho)\n\n\n\nSeason\nEpisodeNumber\nDoctor\nTitle\nRatings\nQuality\n\n\n1\n1\nNinth\nRose\n7.5\nGood\n\n\n1\n2\nNinth\nThe End of the World\n7.6\nGood\n\n\n1\n3\nNinth\nThe Unquiet Dead\n7.5\nGood\n\n\n1\n4\nNinth\nAliens of London\n7  \nRegular\n\n\n1\n5\nNinth\nWorld War Three\n7  \nRegular\n\n\n1\n6\nNinth\nDalek\n8.7\nGreat\n\n\n\n\nFrom our data set we can see that we have information on the following:\n\nSeason Number\nEpisode Number\nEpisode Title\nIMDb User Rating\nCategorical Rating\n\nWe can do a few things with this data. First, lets see which doctor has the most episodes.\n\ndoctorwho %&gt;% \n  group_by(Doctor) %&gt;% \n  count(sort=T) |&gt; \n  hux() |&gt; \n  theme_article()\n\n\n\nDoctor\nn\n\n\nEleventh\n55\n\n\nTenth\n42\n\n\nTwelfth\n27\n\n\nThirteenth\n22\n\n\nNinth\n13\n\n\n\n\nThe eleventh doctor wins out here!\nNext it might be fun to see which season had the highest rating and then graph that.\n\n# These are the custom colors we will be using for our ratings\ndwcolor &lt;- \n  c(\"Bad\"=\"red2\", \"Garbage\" =\"dodgerblue2\", \n    \"Great\" =\"greenyellow\", \"Regular\"=\"darkorange1\", \n    \"Good\" =\"gold1\")\n\ndoctorwho |&gt; \n  group_by(Season) |&gt; \n  ggplot(aes(as.factor(Season),Ratings)) + \n  geom_point(aes(color = Quality),\n             alpha = .2) +\n  stat_summary(\n    fun = \"mean\",\n    geom = \"point\"\n  ) + \n  theme_minimal() +\n  theme(legend.position = \"none\",\n        axis.ticks = element_blank()) +\n  labs(x=\"\\nSeason\",y=\"Rating\\n\",\n       title=\"Doctor Who Average Season Rating\\n\",\n       caption=\"(based on IMDb User Ratings)\") +\n  theme(\n    plot.caption = \n      element_text(\n      face = \"italic\"),\n    plot.title = \n      element_text(\n      face = \"bold\")\n  ) +\n  #scale_color_manual(values = dwcolor)\n  scale_color_discrete()\n\n\n\n\nThe takeaway from this is that the last two seasons were rated as the worst with Season 4 being rated as the best.\nAnother question might be which Doctor has the highest rated episodes?\nLuckily we have a column with categorical information that tells us what ratings correspond to “Great”.\nHere is the system used: &lt; 5.0 = Garbage &lt; 6.5 = Bad &lt; 7.5 = Regular &lt; 8.5 = Good &lt; 10 = Great\nSo we could either filter(Ratings&gt;8.5) or we could filter(Quality==\"Great\").\nGrouping by Doctor ensures that the information of who the Doctor was that received that rating.\n\ndoctorwho %&gt;% \n  group_by(Doctor,Ratings) %&gt;% \n  filter(Quality==\"Great\") %&gt;% \n  group_by(Doctor) %&gt;% \n  count() %&gt;% \n  ggplot(aes(fct_reorder(Doctor,n),n,fill=Doctor,label = n)) +\n    geom_bar(stat=\"identity\") +\n    theme_minimal()+\n  coord_flip() +\n    theme(\n      axis.ticks = element_blank(),\n      legend.position = \"none\",\n      plot.caption = element_text(face = \"italic\"),\n      axis.text.x = element_blank(),\n      axis.text.y = element_text(face = \"bold\")\n      ) +\n    labs(x=\"\",y=\"\",\n         title=\"Number of 'Great' Episodes: Per Doctor\\n\",\n         captions=\"(based on IMDb User Ratings)\") +\n  scale_fill_viridis_d(alpha = .6) +\n  geom_label(color = \"black\") \n\n\n\n\nTo be honest, no surprise here either!\nLastly, let’s construct a heatmap of all of the episodes of Doctor Who.\n=\n\n# Plotly is a package add-on that will make our graph interactive\n# This is how it can be specially formatted\ndoctorwho_pltly &lt;- \n  doctorwho %&gt;% \n  mutate(text=\n           paste0(\"Season: \", Season, \"\\n\",\n                  \"Episode: \", EpisodeNumber,\"\\n\",\n                  \"Title: \", Title, \"\\n\",\n                  \"Doctor: \",Doctor))\n\nlibrary(ggtext)\np &lt;- \n  doctorwho %&gt;% \n  ggplot(aes(factor(Season),EpisodeNumber,fill=Quality)) +\n    geom_tile(colour=\"black\")+\n    geom_text(aes(label=Ratings))+\n    scale_fill_manual(values=dwcolor)+\n  theme_minimal()+\n  theme(axis.ticks = element_blank(),\n        plot.subtitle = element_markdown()) +\n    labs(x=\"Season\\n\",\n         y=\"\\nEpisode\",\n         title=\"Doctor Who IMDb Ratings: 2005-2020\",\n         subtitle = \"Ratings of the &lt;span style='color:#0072B2;'&gt;good&lt;/span&gt;\n         and &lt;span style='color:#009E73;'&gt;bad&lt;/span&gt;\")\n  \nggplotly(p)"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Hi, I’m Dave.",
    "section": "",
    "text": "I am a Lecturer, Lab Manager, and Internship Coordinator at Farmingdale State College. I am overly emphatic about R, music, and all things data!"
  },
  {
    "objectID": "basictut.html",
    "href": "basictut.html",
    "title": "Basic Operations",
    "section": "",
    "text": "Note\n\n\n\nNote: Today we will go through how to install R-Studio, use the console for basic math, and store expressions and calculations as variables.."
  },
  {
    "objectID": "basictut.html#installing-and-navigating-r-and-r-studio",
    "href": "basictut.html#installing-and-navigating-r-and-r-studio",
    "title": "Basic Operations",
    "section": "Installing and Navigating R and R-Studio",
    "text": "Installing and Navigating R and R-Studio\n\n\n\n\n\n\nImportant\n\n\n\nIn order to get the confusion out of the way, when we are working in R-Studio, we are going to just call it R. There are two distinct programs, R and R-Studio. The differences is that R does not have a Graphical User Interface. This means that there are no dialog boxes or viewer panes built in. I prefer using R-Studio because it alots a few more options to the user.\n\n\n\nYou will first need to install R. Make sure to note the operating system you are working on when doing so.\nOnce R is installed, you will need to install R-Studio.\nWhen you open R you will see that there are three large boxes on the screen. The largest box on the left is the Console. This is where whatever you type will be evaluated by the program and when you press Enter, a result will appear below what you have typed.\n\n\n\n\n\n\n\nNote\n\n\n\nTry it out: Type your name into the console and press Enter. Do you notice that you get an error message? Why do you think this is?\n\n\n\nThe area on the right is divided into two parts: A tabset with the options; Environment,History,Connections, and Build. Additionally, there is a tabset directly below with the options; Files, Plots, Packages, Help, and Viewer.\n\nFor the moment, we will only be paying attention to the Console.\nBasic Math\nIt may seem trivial at first, but it is good to know that the Console in R has an interface that acts as a calculator. The green text is what is typed into the console, and the black text, preceded by [1] is the result of the expression.\nLoading\n  webR...\n\n\n  \n\nLoading\n  webR...\n\n\n  \n\nLoading\n  webR...\n\n\n  \n\nLoading\n  webR...\n\n\n  \n\nLoading\n  webR...\n\n\n  \n\nR will also follow the order of expressions, or how must of us know it: PEMDAS (Parentheses, exponents, multiplication, division, addition, and subtraction). This is especially important if you ever do a long formula.\nLoading\n  webR...\n\n\n  \n\nVariables\nAny expression you type into the console can be stored as a variable, which can be called later on. These variables can also be used in conjunction with different math expressions. It is important to note that when creating a variable, the variable can be used interchangably with the number(s) stored inside of it.\n\n\n\n\n\n\nNote\n\n\n\nNote that the way we assign a number or object to a variable is by using &lt;-. You can also use =, but as you will see in later seminars, the former option is a little more powerful.\nYou can use the shortcut: Option + Minus (Mac) | Alt + Minus (PC)\n\n\nLoading\n  webR...\n\n\n  \n\nLoading\n  webR...\n\n\n  \n\n\n\n\n\n\n\nTip\n\n\n\nTry it out: Create a variable called Name and have this equal your name. After you have done, type the variable Name and press enter.\n\n\nLoading\n  webR...\n\n\n  \n\nYou most likley got an error message. Here is why…\nData Types\nIn R, there are different data types or classes that R will recognize. We will first focus on Numeric and Character. Take note of the class()function that identify how R evalutes this variable.\nLoading\n  webR...\n\n\n  \n\nLoading\n  webR...\n\n\n  \n\nNow that we know that R evaluates different types of data in different ways, let us try out the Name exercise again.\nLoading\n  webR...\n\n\n  \n\nPerfect!\nThe reason that it would not work before is because R has no way of knowing what you are trying to type unless you explicitly tell it that you are trying to type a name, which is a character, denoted by two quotation marks.\n\n\n\n\n\n\nTip\n\n\n\nTry it out: Create a variable with the following numbers: 1,1,2,3,5,8,13 and store it under the name Fib. Type Fib back into the console and press Enter.\n\n\nYou probably were greeted with another error message. This is because R has no way of knowing that you want to display 7 distinct numbers. To get around this we have to do something called “concatenation”.\nIf we want to create a variable with more than one number, or object, inside of it we need to concatenate or combine that data first. In R this is done using the c() function. We can also call an object containing several unique numbers, a vector.\nLoading\n  webR...\n\n\n  \n\nBy using the c() function, we are telling R to take these numbers (separated by a comma) and combine them so that they are all included in the variable, but still have their individuality.\nIf you wanted to see what the 5th number was in the Fib, you would put a bracket []next to the variable name. Inside of the brackets you would put the position you wanted to see.\nLoading\n  webR...\n\n\n  \n\n\n\n\n\n\n\nTip\n\n\n\nTry it out: Create a numeric vector named Add3 containing the numbers, 1,4,6,9. How could we go about adding 3 to each number in this vector?\n\n\n\n\n\n\n\n\nNote\n\n\n\nIt was mentioned before that the variables take on the properties of the objects in which they are created from. What this means is that if I declare x &lt;- 3, x + 3, my result should be 6. With this in mind, the same should work on a group of numbers.\n\n\nLoading\n  webR...\n\n\n  \n\n\n\n\n\n\n\nImportant\n\n\n\nThis is especially helpful when you are dealing with data that you need to transform. We will learn about data transformation in later seminars."
  },
  {
    "objectID": "writing.html",
    "href": "writing.html",
    "title": "Writing",
    "section": "",
    "text": "Below are some links to Medium articles i have published that walk through using shiny and visnetwork to make interactive visuals:"
  },
  {
    "objectID": "descript.html",
    "href": "descript.html",
    "title": "Descriptive Statistics",
    "section": "",
    "text": "** Introduction to R-Studio: Descriptive Statistics**\n\n\n\n\n\n\nNote\n\n\n\nNote: Today we will go over how to create a data set to work with using the rnorm and pnorm functions. We will use the functions mean, median, and range to get measures of central tendency.\n\n\n\nData Generation\n\n\n\n\n\n\nTip\n\n\n\nWhen we do not have data to work with, we can create it ourselves. It is important to note that this is only useful, and ethical, when we are doing it for instructional purposes!\n\n\nThe function rnorm has a few arguments that help specify the type of data that it will return: - rnorm(n,mean,sd) - n = number of observations - mean = desired mean of the sample - sd = desired standard deviation of the sample\nLoading\n  webR...\n\n\n  \n\n\nIn the above case, it was specified that we wanted R to return us a dataset that had an n of 10, a mean of 10, and a standard deviation of 1.\nThere are some instances of preference when it comes to data generation,but I prefer the data to look a bit cleaner so I will usually:\n\nround the data so that there are two decimal places after the 0\n\nWe can do this by wrapping the round function around our rnorm function. round has one argument, digits=n, where n is the number of digits you would like to round to. In practice it should look like this:\n\n\nLoading\n  webR...\n\n\n  \n\n\n\nexclude numbers below 0 from the data.\n\nLoading\n  webR...\n\n\n  \n\n\nTry it out: Make a variable called y and make sure that it has 30 observations, a mean of 5, and a standard deviation of 5. Make sure that the data is rounded to 0 decimal places and does not include any value greater than 100 or less than 0.\nLoading\n  webR...\n\n\n  \n\n\nWe can now assume that data we have generated could have come from a class that just recently took a test. What we would like to do next is find out some of the generalities of this data.\n\n\nDescriptive Statistics\n\nWhat is the average score?\nWhat score is right in the middle?\nWhat is the range of scores?\n\nWe can do this using the mean, median, and range functions.\nAll of these functions work by placing the object or variable you are looking to get descriptive data from.\nWhen you are dealing with ‘real data’ you should make sure to give the dataset a descriptive name so you understand what you are working with. Let us rename the variable y to be called testscores instead.\nLoading\n  webR...\n\n\n  \n\n\nNow that we have workable data we can start to look its properties.\nLoading\n  webR...\n\n\n  \n\n\nLoading\n  webR...\n\n\n  \n\n\nLoading\n  webR...\n\n\n  \n\n\nWe can see that we have a mean of 79.12, a median of 79, and a range of 17.\nIn addition to using these three functions to extract summary data, we can use another function aptly named summary. This function returns the above three values as well as two additional values referencing datapoints in the 1st and 3rd quadrants.\nThe summary function works by placing the variable you want to summarize inside the parentheses.\nLoading\n  webR...\n\n\n  \n\n\nIt might also be helpful for us to see what the standard deviation is for this dataset. We can do this by using the sd function.\nLoading\n  webR...\n\n\n  \n\n\nWe now have the ability to tell this professor that the average grade of her students was 79.12, and the standard deviation was 4.94402.\nThis should not be too surprising to us seeing as how we designated the properties of this data set when we used our first rnormfunction!\n\n\n\n\n\n\nNote\n\n\n\nTry it out: Get the summary data for the following data:\n\n\nLoading\n  webR..."
  },
  {
    "objectID": "string.html#some-primer-on-why-regex-is-useful",
    "href": "string.html#some-primer-on-why-regex-is-useful",
    "title": "String Manipulation",
    "section": "Some primer on why regex is useful",
    "text": "Some primer on why regex is useful\nLoading\n  webR...\n\n\n  \n\n\nLoading\n  webR...\n\n\n  \n\n\n\nCase Manipulation\nLoading\n  webR...\n\n\n  \n\n\nLoading\n  webR...\n\n\n  \n\n\nLoading\n  webR...\n\n\n  \n\n\nLoading\n  webR...\n\n\n  \n\n\nIt might be of interest to see how long the sentence is in terms of how many letters each word is\nLoading\n  webR...\n\n\n  \n\n\nNow the sentence is a string vector, so the str_length function will vectorize it\nLoading\n  webR...\n\n\n  \n\n\n\n\nString Manipulation\nLoading\n  webR...\n\n\n  \n\n\nLoading\n  webR...\n\n\n  \n\n\nLoading\n  webR...\n\n\n  \n\n\nLoading\n  webR...\n\n\n  \n\n\nLoading\n  webR...\n\n\n  \n\n\n\n\nRegular Expression Glossary:\n\nLooking for numbers\n\\\\d and [0-9]\n\nExample:\nLoading\n  webR...\n\n\n  \n\n\n\n\n\nLooking for boundary character\n\\\\b\n\nExample:\nLoading\n  webR...\n\n\n  \n\n\nLoading\n  webR...\n\n\n  \n\n\n\n\n\nLooking for word characters\n\\\\w\n\nExample:\nLoading\n  webR...\n\n\n  \n\n\n\n\n\nLook for characters in the range of a-z (case-sensitive)\n[a-z]\n\nExample:\nLoading\n  webR...\n\n\n  \n\n\nLoading\n  webR...\n\n\n  \n\n\nLoading\n  webR...\n\n\n  \n\n\n\n\n\nLook for characters in the range of A-Z (case-sensitive)\n[A-Z]\n\n\nLook for characters in the range of A-Z and a-z (case-sensitive)\n[aA-zZ]\n\n\nMatch your pattern exactly n times\n{n}\n\n\nMatch your pattern &gt;= n\n{n,}\n\n\nMatch your pattern between n and k times\n{n,k}\n\nExample:\nLoading\n  webR...\n\n\n  \n\n\nLoading\n  webR...\n\n\n  \n\n\nLoading\n  webR...\n\n\n  \n\n\n\n\n\nKeep matching until you encounter a new pattern\n+\nLoading\n  webR...\n\n\n  \n\n\nLoading\n  webR...\n\n\n  \n\n\nLoading\n  webR...\n\n\n  \n\n\n\n\nMatch any character except for line break. Useful when you don’t know how many characters are in the pattern\n.\nLoading\n  webR...\n\n\n  \n\n\nLoading\n  webR...\n\n\n  \n\n\n\n\nMatch zero or more times\n*\nLoading\n  webR...\n\n\n  \n\n\n\n\nMatch start of a string\n^\n\nExample: WHY DOES THIS NOT WORK?\nLoading\n  webR...\n\n\n  \n\n\n\n\n\nMatch end of a string\n$\n\nExample:\nLoading\n  webR...\n\n\n  \n\n\nLoading\n  webR...\n\n\n  \n\n\n\n\n\n\nRegular Expressions\nReplace a word with something else, we will return the string into sentence format\nLoading\n  webR...\n\n\n  \n\n\nReplace any three letter word with “cake”\nLoading\n  webR...\n\n\n  \n\n\nLoading\n  webR...\n\n\n  \n\n\n\n\nRemove a pattern\nLoading\n  webR...\n\n\n  \n\n\nLoading\n  webR...\n\n\n  \n\n\n\n\nDetect\nDoes anything in your string match this pattern\nLoading\n  webR...\n\n\n  \n\n\nLoading\n  webR...\n\n\n  \n\n\n\n\nUsing stringi to generate passwords\nstri_rand_strings accepts the following arguments:\n\nn: The number of strings you want to make\nlength: The length of the string you want\npattern: The pattern you want to match\n\nLoading\n  webR...\n\n\n  \n\n\n\n\nString Manipulation: Use Cases - String Extraction\nImagine that you were given the following dataset:\nLoading\n  webR...\n\n\n  \n\n\nYour task is to extract just the numbers. You could do it one of two ways:\nLoading\n  webR...\n\n\n  \n\n\nLoading\n  webR...\n\n\n  \n\n\nBoth methods return the same values, but with fewer needed regular expressions to match in the second example"
  }
]