[
  {
    "objectID": "gg.html",
    "href": "gg.html",
    "title": "Introduction to ggplot",
    "section": "",
    "text": "Introduction to ggplot2\n\nWhen I first started out with R, I only ever used the base plotting system. This was primarily because once I saw an example of a plot made with ggplot I was a little bit scared.\nAfter awhile I realized that ggplot was the way to go when it came to graphics. The goal of this is to hopefully assuage you to do the same!\nFirst, we will generate some data. I teach so we will use students and scores on a test and then look at how the students performed.\nSome of my colleagues use a 4 test grading scheme where each test is worth 25%. Let’s create a sample dataset with a class of 40 students and varying scores for each student as well as an average for each student.\n\nlibrary(ggplot2)\nlibrary(forcats)\nlibrary(stringr)\nlibrary(dplyr)\n\n\nAttaching package: 'dplyr'\n\n\nThe following objects are masked from 'package:stats':\n\n    filter, lag\n\n\nThe following objects are masked from 'package:base':\n\n    intersect, setdiff, setequal, union\n\ntest_data &lt;- data.frame(\n  Exam_1=round(runif(40,80,85)),\n  Exam_2=round(runif(40,75,100)),\n  Exam_3=round(runif(40,70,90)),\n  Exam_4=round(runif(40,60,100)))\n\ntest_data$FinalGrade &lt;- rowMeans(test_data)\n\nhead(test_data)\n\n  Exam_1 Exam_2 Exam_3 Exam_4 FinalGrade\n1     81     75     77     70      75.75\n2     84     87     90     91      88.00\n3     83     82     74     91      82.50\n4     81     86     72     98      84.25\n5     83     84     77     99      85.75\n6     81     99     81     96      89.25\n\n\nLet’s make a plot of the average score on each exam using the base plotting system.\n\n# Get the means of each column (exam)\ntest_means &lt;- colMeans(test_data)\n# Only use the first four exams\ntest_means &lt;- test_means[1:4]\n\nExam_1m=mean(test_data$Exam_1)\nExam_2m=mean(test_data$Exam_2)\n\nbarplot(c(test_means),\n        names.arg = c(\"Exam 1\",\"Exam 2\",\"Exam 3\",\"Exam 4\"),\n        col=c(\"darkblue\",\"darkgreen\",\"darkorange\",\"darkred\"),\n        density = 40,\n        ylim = c(0,100),\n        xlab=\"Exam Number\",\n        ylab=\"Score\",\n        main=\"Exam Score Averages\")\n\n\n\n\n\n\n\nThis does not look bad, but we could probably do better with ggplot.\nThe first thing to note is the syntax that ggplot uses.\nggplot(data,aes(x,y)) +   geom_() +   labs() +   theme_classic() +   theme()\nYou will see here that each line is followed by a + which indicates that a new layer is being added. Let’s try this out using our dataframe. I will do it the way you will see it most places, and then afterwards only do it the shortened way:\n\n# Use the means we created before and add two line numbers\ngg_test &lt;- data.frame(ExamNum=c(\"Exam 1\",\"Exam 2\",\"Exam 3\",\"Exam 4\"),\n  averages = test_means)\n\n\n# x-axis will be the test number, y will be the average \n# The color will change based on value of the average\nggplot(data=gg_test,aes(x=ExamNum,y=averages,fill=averages))+\n  # Tells R to plot the value associated with the x-axis\n  geom_bar(stat=\"identity\")+\n  # A nice theme \n  theme_minimal()+\n  # Specifies x and y axes labels and title for plot\n  labs(x=\"Exam Number\",y=\"Score\",\n       title=\"Exam Score Averages\") +\n  # Removes legend\n  theme(legend.position = \"none\")+\n  # Specify limits \n  ylim(0,100) +\n  # Adds values from the averages vector and vertically adjusts\n  geom_text(aes(label=averages,\n                vjust=-.3)) +\n  theme(\n    axis.text.y = element_blank(),\n    plot.title = element_text(hjust = .5, \n                              size = 15,\n                              face = \"bold\")\n  )\n\n\n\n\n\n\n\nI know that there is a lot going on in the example, but it just kind of looks nice, right?\nLet’s go back to the example and add some filtering. Let’s make a new column that determines whether or not a student passed or failed the test.\nWhen we first made the dataset we included a fifth column, FinalGrade that represents the students overall grade. We will then make a series of statements that will determine what the letter grade is, and then plot the result!\nWe will be using the %&gt;% or pipe operator to pass the contents of test_data into our arranging.\nWe will first use the mutate function which creates a new column based on the arguments you pass to it.\nWe will also be using case_when which acts as an ifelse statement but with multiple conditionals.\n\nThe basic structure is: case_when(variable=this~make it this)\n\n\n\ntest_data %&gt;% \n  mutate(LetterGrade=case_when(\n    FinalGrade&gt;=95~\"A\",\n    FinalGrade&gt;=90~\"A-\",\n    FinalGrade&gt;=87~\"B+\",\n    FinalGrade&gt;=84~\"B\",\n    FinalGrade&gt;=80~\"B-\",\n    FinalGrade&gt;=74~\"C+\",\n    FinalGrade&gt;=70~\"C\",\n    FinalGrade&gt;=67~\"D+\",\n    FinalGrade&gt;=64~\"D\",\n    FinalGrade&gt;=60~\"D-\",\n    FinalGrade&lt;60~\"F\"))\n\n   Exam_1 Exam_2 Exam_3 Exam_4 FinalGrade LetterGrade\n1      81     75     77     70      75.75          C+\n2      84     87     90     91      88.00          B+\n3      83     82     74     91      82.50          B-\n4      81     86     72     98      84.25           B\n5      83     84     77     99      85.75           B\n6      81     99     81     96      89.25          B+\n7      84     91     76     83      83.50          B-\n8      85     92     71     63      77.75          C+\n9      80     83     72     77      78.00          C+\n10     84     78     80     82      81.00          B-\n11     83     99     81     68      82.75          B-\n12     84     78     82     64      77.00          C+\n13     84     91     88     96      89.75          B+\n14     81     82     82     90      83.75          B-\n15     85     86     88     64      80.75          B-\n16     82     86     84     73      81.25          B-\n17     84     83     83     94      86.00           B\n18     81     90     80     88      84.75           B\n19     81     91     87     63      80.50          B-\n20     85     88     77     92      85.50           B\n21     82     84     88     78      83.00          B-\n22     84     86     74     88      83.00          B-\n23     84     84     73     65      76.50          C+\n24     82     78     83     87      82.50          B-\n25     81     99     84     67      82.75          B-\n26     83     81     90     67      80.25          B-\n27     82     98     87     63      82.50          B-\n28     83     95     70     95      85.75           B\n29     80     93     89     71      83.25          B-\n30     82     91     73     93      84.75           B\n31     82     84     83     68      79.25          C+\n32     81     75     82     83      80.25          B-\n33     84     88     72     85      82.25          B-\n34     84     88     77     94      85.75           B\n35     83     97     71     84      83.75          B-\n36     83     95     78     75      82.75          B-\n37     84     79     75     91      82.25          B-\n38     82    100     85     73      85.00           B\n39     82     92     85     68      81.75          B-\n40     82     81     85     95      85.75           B\n\n\n\nfinal_grade &lt;- test_data %&gt;% \n  mutate(LetterGrade=case_when(\n    FinalGrade&gt;=95~\"A\",\n    FinalGrade&gt;=90~\"A-\",\n    FinalGrade&gt;=87~\"B+\",\n    FinalGrade&gt;=84~\"B\",\n    FinalGrade&gt;=80~\"B-\",\n    FinalGrade&gt;=74~\"C+\",\n    FinalGrade&gt;=70~\"C\",\n    FinalGrade&gt;=67~\"D+\",\n    FinalGrade&gt;=64~\"D\",\n    FinalGrade&gt;=60~\"D-\",\n    FinalGrade&lt;60~\"F\")) %&gt;% \n    group_by(LetterGrade) %&gt;% \n    count()\n\nfinal_grade\n\n# A tibble: 4 × 2\n# Groups:   LetterGrade [4]\n  LetterGrade     n\n  &lt;chr&gt;       &lt;int&gt;\n1 B              10\n2 B+              3\n3 B-             21\n4 C+              6\n\n\nOur students didn’t do particularly well, but that is to be expected when we control the range their grades can be in!\nNext, we will graph the data using ggplot, but this time we will pass the dataframe directly into the plot and remove the  x= and y= declarations\nWhen we graph the results the letter grades will be backwards so we will need to use fct_rev to reverse them.\n\nfinal_grade %&gt;% \n  # Place Grades on X axis and count on Y axis\n  # Color based on Letter Grade\n  ggplot(aes(fct_rev(LetterGrade),n,fill=LetterGrade)) +\n    geom_bar(stat=\"identity\") +\n    theme_minimal(base_size=12) +\n    labs(x=\"\",y=\"Count\",\n         title=\"Letter Grade Frequency\") +\n    # Flip the axes for better readability\n    coord_flip() +\n    # Remove the legend and the axis ticks\n    theme(legend.position =\"none\",\n          axis.ticks = element_blank()) +\n    # Add the count to the bars\n    geom_text(aes(label=n,\n                  hjust=-.08)) +\n  theme(\n    axis.text.x = element_blank()\n  )\n\n\n\n\n\n\n\nI’m not entirely sure, but I think I’m just addicted to bar charts–but that’s my problem!\nScatterplots\nWhen I was first learning R in graduate school the class was given a task to plot points but in different colors depending on what gender the points came from. In base plotting this requires the use of not only the plot function but also the points function. It is entirely doable, but ggplot just handles it better!\nLet’s generate some data where we have hypothetical participants take an experiment where their reaction time is measured as well as their mood is measured.\n\nscat_df &lt;- \n  data.frame(\n    Sex=sample(c(\"M\",\"F\"),100,replace = T),\n    RT=round(rnorm(100,800,150),2),\n    TestScore=c(round(runif(50,60,100)),\n                round(runif(50,40,90)))\n)\nscat_df\n\n    Sex      RT TestScore\n1     M  740.84        70\n2     F  824.85        81\n3     M  977.32        89\n4     F  983.64        83\n5     F  954.53        64\n6     F 1135.01        67\n7     F 1238.66        92\n8     M  934.69        95\n9     M  920.70        71\n10    F  657.51        81\n11    F  696.45        68\n12    F  686.58        77\n13    M  961.72        76\n14    M  783.74        73\n15    M  577.14        79\n16    M  936.96        73\n17    F  960.30        97\n18    F  811.17        92\n19    M  928.44        65\n20    F  832.58        73\n21    F  619.15       100\n22    M  756.87        61\n23    M  823.75        78\n24    F  821.05        69\n25    M  836.66        61\n26    M  935.22        86\n27    F  814.14        82\n28    F  982.85        99\n29    F  541.29        73\n30    M  760.71        66\n31    M  466.01        94\n32    F  637.62        72\n33    M  917.07        81\n34    M  811.05        86\n35    F  831.48        65\n36    F  682.24        98\n37    M  730.54        74\n38    F  902.77        68\n39    F  653.02        92\n40    M  871.98        65\n41    M  619.63        82\n42    F  787.32        69\n43    M  968.87        66\n44    F  787.45        77\n45    M  719.06        72\n46    F  673.00        73\n47    F  893.75        69\n48    M  896.50        86\n49    F 1087.69        89\n50    F  818.67        65\n51    M  839.87        70\n52    F 1153.98        79\n53    F  833.77        88\n54    M  542.64        51\n55    M 1070.14        66\n56    M  878.58        44\n57    F  672.40        76\n58    F  867.02        47\n59    M  700.63        65\n60    M  805.31        50\n61    F  548.53        56\n62    M  801.57        45\n63    F  609.79        79\n64    M  648.57        46\n65    F  858.18        52\n66    M  851.89        70\n67    M  720.19        82\n68    F  932.76        74\n69    F 1015.10        87\n70    F  854.16        86\n71    F  918.34        85\n72    M  648.22        59\n73    F  787.77        72\n74    F  691.55        81\n75    F  865.04        48\n76    F  684.61        46\n77    M  721.87        61\n78    M  860.27        74\n79    F  816.33        53\n80    M 1006.05        68\n81    F  718.43        47\n82    M  765.07        56\n83    F  875.86        82\n84    M  699.66        63\n85    F  773.67        79\n86    M 1018.07        77\n87    F  711.64        52\n88    M  860.27        80\n89    F  951.78        53\n90    F  773.64        52\n91    M  903.99        62\n92    F 1068.49        60\n93    M 1015.69        69\n94    F 1094.69        51\n95    M  660.86        71\n96    M  667.90        85\n97    M  929.31        87\n98    F  696.93        79\n99    F  748.91        82\n100   F  687.11        43\n\n\nPlot Sex against RT and have the colors be linked to the Sex of the participant (point).\n\nscat_df %&gt;% \n  ggplot(aes(TestScore,RT,color=Sex)) +\n    geom_point(aes(shape=Sex)) +\n    theme_minimal() +\n    labs(x=\"Test Score\",\n         y=\"RT(ms)\",\n         title=\"RT and Test Scores\")\n\n\n\n\n\n\n\nClearly no real pattern is emerging from the data, but we can see a clear distinction between the different points.\nHeatmaps\nOne of my favorite geom’s to use is geom_tile which creates a heatmap style plot.\nLet’s create a fake TV show with fake episode titles and fake episode ratings.\n\nDave_TV &lt;- \n  data.frame(\n    Season=rep(paste0(\"S\",1:6),each=12),\n    Episode=as.factor(rep(1:12,6)),\n    Title=str_to_title(paste0(\"The \",\n                              sample(words,72),\" \",\n                              sample(words,72))),\n    Ratings=c(runif(60,7.8,9),runif(12,6,9)) |&gt; round(0),\n    stringsAsFactors = F)\n\nDave_TV\n\n   Season Episode                 Title Ratings\n1      S1       1      The Both Educate       9\n2      S1       2       The Match Sound       8\n3      S1       3       The Hate People       9\n4      S1       4          The You Back       8\n5      S1       5      The Result Stuff       8\n6      S1       6           The Go Pair       8\n7      S1       7  The Minister Correct       8\n8      S1       8         The Young Arm       8\n9      S1       9     The Except School       8\n10     S1      10     The Since Succeed       8\n11     S1      11        The File Agent       9\n12     S1      12      The Debate Point       9\n13     S2       1         The Tape Many       9\n14     S2       2       The Grant Final       9\n15     S2       3      The Farm Between       9\n16     S2       4      The Fund Process       9\n17     S2       5   The Moment Standard       9\n18     S2       6          The Can What       9\n19     S2       7      The Milk Science       8\n20     S2       8        The Which Kind       8\n21     S2       9  The Television Heart       8\n22     S2      10          The Tend Die       9\n23     S2      11        The Load Story       8\n24     S2      12     The Actual Second       9\n25     S3       1         The Area Feed       8\n26     S3       2      The Top Together       9\n27     S3       3    The Document Study       9\n28     S3       4       The Meaning Own       9\n29     S3       5     The Succeed Break       8\n30     S3       6    The Reason Balance       8\n31     S3       7 The Really Experience       9\n32     S3       8       The Listen Free       8\n33     S3       9       The Hell Indeed       8\n34     S3      10      The Flat Fortune       8\n35     S3      11       The Kitchen Few       9\n36     S3      12     The Answer Almost       8\n37     S4       1    The Blow Committee       9\n38     S4       2      The Eleven Count       8\n39     S4       3    The Positive Sleep       8\n40     S4       4          The Nine God       8\n41     S4       5          The Sit Real       9\n42     S4       6        The Say Manage       9\n43     S4       7  The Language Develop       9\n44     S4       8         The From Area       8\n45     S4       9         The Yes Stand       8\n46     S4      10        The Hand Today       8\n47     S4      11   The Again Telephone       9\n48     S4      12     The Every Instead       9\n49     S5       1 The Measure Difficult       9\n50     S5       2        The Much Apart       9\n51     S5       3        The About Hold       8\n52     S5       4        The Baby Eight       8\n53     S5       5     The Explain World       8\n54     S5       6       The Society Put       8\n55     S5       7 The Function Function       9\n56     S5       8      The Respect Cold       8\n57     S5       9        The Side Until       8\n58     S5      10       The Happen Hair       8\n59     S5      11    The But Department       8\n60     S5      12 The Secretary Realise       8\n61     S6       1      The Sick Collect       6\n62     S6       2         The Rail Team       9\n63     S6       3     The Main Organize       7\n64     S6       4        The Pack Often       9\n65     S6       5        The Refer Find       7\n66     S6       6      The Hundred Keep       7\n67     S6       7     The Change Sudden       7\n68     S6       8         The Press Bar       8\n69     S6       9       The Left Moment       8\n70     S6      10       The Term Though       7\n71     S6      11       The Beauty Away       8\n72     S6      12           The One Age       6\n\n\nFirstly, I want to take a moment to see how truly excellent some of the episode titles are:\n\ntitle_samp &lt;- sample(Dave_TV$Title,10)\ntitle_samp\n\n [1] \"The Fund Process\"      \"The Again Telephone\"   \"The Measure Difficult\"\n [4] \"The Side Until\"        \"The Moment Standard\"   \"The Baby Eight\"       \n [7] \"The Answer Almost\"     \"The Refer Find\"        \"The Respect Cold\"     \n[10] \"The Grant Final\"      \n\n\nAnyways, now that our data is in the correct format we can plot it.\n\nDave_TV %&gt;% \n  ggplot(aes(Season,Episode,fill=Ratings)) +\n    geom_tile(size=1) +\n    theme_minimal() +\n    geom_text(aes(label=Ratings)) +\n    theme(axis.ticks = element_blank())+\n    scale_fill_gradient(low=\"yellow\",high=\"blue\")\n\nWarning: Using `size` aesthetic for lines was deprecated in ggplot2 3.4.0.\nℹ Please use `linewidth` instead.\n\n\n\n\n\n\n\n\nThere could be an entirely separate tutorial on just color choices in ggplot2.\nHere is one last iteration that uses conditional values to color each episode or tile.\n\ncols=c(\"Bad\"=\"red2\",\n       \"Garbage\" =\"darkblue\",\n       \"Great\" =\"darkgreen\",\n       \"Regular\"=\"darkorange\", \n       \"Good\" =\"gold\")\n\nDave_TV %&gt;% \n  mutate(Quality=case_when(\n      Ratings&lt;5.0 ~ \"Garbage\",\n      Ratings&lt;6.5 ~ \"Bad\",\n      Ratings&lt;7.5 ~ \"Regular\",\n      Ratings&lt;8.5 ~ \"Good\",\n      Ratings&lt;10 ~ \"Great\")) %&gt;% \n  ggplot(aes(Season,Episode,fill=Quality)) +\n    geom_tile(color=\"black\",size=.085) +\n    theme_minimal() +\n    geom_text(aes(label=Ratings)) +\n    theme(axis.ticks = element_blank()) +\n    scale_fill_manual(values=cols) +\n    labs(x=\"\",y=\"\",\n        title=\"Dave TV Episode Ratings\",\n        caption=\"Data from IAmDb)\") +\n  theme(\n    plot.caption = element_text(face = \"italic\")\n  )\n\n\n\n\n\n\n\nSo there you have it, a very brief introduction to ggplot. As my own projects expand, I will include new sections or add more examples here."
  },
  {
    "objectID": "research.html",
    "href": "research.html",
    "title": "Research",
    "section": "",
    "text": "My research focuses on the area of Social Psychology known as Person Perception.\nHere are a few projects I have worked on:\n\nMorbid Curiosity\nCaretaker Burden"
  },
  {
    "objectID": "courses.html",
    "href": "courses.html",
    "title": "Teaching",
    "section": "",
    "text": "I have taught three classes as a lab instructor:\n\nStatistics for the Psychological Sciences - SPSS-Approach\nExperimental Psychology\nStatistics for the Psychological Sciences - R-Approach\n\nI am currently teaching three courses as a full instructor:\n\nIntroduction to Psychology\nResearch Methods\nSenior Project II - Applied Psychology\n\n\nTeaching Materials\nEntire Course in R"
  },
  {
    "objectID": "vis1.html",
    "href": "vis1.html",
    "title": "Visualizations: {Stringr}",
    "section": "",
    "text": "Usingdplyr and the stringr::words package, we can demonstrate how to extract information from a dataset. Before we get into anything, let us take a look at a few of the characteristics of the stringr::words dataset.\nlibrary(stringr)\nlibrary(dplyr)\n\n\nAttaching package: 'dplyr'\n\n\nThe following objects are masked from 'package:stats':\n\n    filter, lag\n\n\nThe following objects are masked from 'package:base':\n\n    intersect, setdiff, setequal, union\n\nlibrary(ggplot2)\nlibrary(forcats)\nlibrary(tidytext)\nhead(stringr::words)\n\n[1] \"a\"        \"able\"     \"about\"    \"absolute\" \"accept\"   \"account\"\nwords |&gt; \n  summary()\n\n   Length     Class      Mode \n      980 character character\nA dataset with 980 words seems like a great tool to have!"
  },
  {
    "objectID": "vis1.html#stringrsentences",
    "href": "vis1.html#stringrsentences",
    "title": "Visualizations: {Stringr}",
    "section": "stringr::sentences",
    "text": "stringr::sentences\n\nsentences_t &lt;- \n  tibble(\n    line=1:length(sentences),\n    sentence=sentences)\n\nsentences_t_ns &lt;- \n  sentences_t %&gt;% \n  unnest_tokens(word,sentence) %&gt;% \n  group_by(word) %&gt;% \n  count(sort=T) %&gt;% \n  ungroup() %&gt;% \n  slice(1:20) \n\nsentences_t_ns %&gt;% \n  ggplot(aes(fct_reorder(word,n),n)) + \n    geom_point() + \n    geom_segment(aes(word,xend=word,n,yend=0)) +\n    coord_flip() +\n    theme_minimal() +\n    theme(axis.ticks = element_blank(),) +\n    labs(x=\"\",y=\"\",\n         title=\"Most Used Words: Stop Words Included\",\n         caption=\"(based on stringr::sentences\")\n\n\n\n\n\n\n\n\nsentences_t_s &lt;- \n  sentences_t %&gt;% \n  unnest_tokens(word,sentence) %&gt;% \n  anti_join(stop_words) %&gt;% \n  group_by(word) %&gt;% \n  count(sort=T) %&gt;% \n  ungroup() %&gt;% \n  slice(1:20) \n\nJoining with `by = join_by(word)`\n\n\n\nsentences_t_s &lt;- \n  sentences_t_s %&gt;% \n  ggplot(aes(fct_reorder(word,n),n)) + \n  geom_point() + \n  geom_segment(aes(word,xend=word,n,yend=0)) +\n  coord_flip() +\n  theme_minimal() +\n  theme(axis.ticks = element_blank(),) +\n  labs(x=\"\",y=\"\",\n       title=\"Most Used Non Stop_Words\",\n       caption=\"(based on stringr::sentences)\")\nsentences_t_s"
  },
  {
    "objectID": "scrape.html",
    "href": "scrape.html",
    "title": "scrape",
    "section": "",
    "text": "Using dplyr and ggplot for Visualization\n\nlibrary(ggplot2)\nlibrary(stringr)\nlibrary(forcats)\nlibrary(gganimate)\nlibrary(tidytext)\nlibrary(dplyr)\nlibrary(plotly)\nlibrary(huxtable)\n\nI am still getting used to the idea of a few of these functions so if this seems all over the place, there is a reason for that!\nI came across this post on r/dataisbeautiful and I was instantly convinced to give it a shot!\nThe method I used was a little bit convoluted and hacky. What I am going to show here is how to read data off of a website and then show you how the data looks, and how to plot it in the way we would like.\nFurther down the line when I am more comfortable with the complex, I can make a more detailed tutorial.\nFor now, we will be downloading the file hosted here\n\n# First read in the csv hosted on my Github\ndoctorwho &lt;- \n  read.csv(\"https://raw.githubusercontent.com/DavidBrocker/personal/master/files/DoctorWho_Ratings.csv\") |&gt; \n  select(!X)\n\n\nhead(doctorwho)\n\n\n\nSeason\nEpisodeNumber\nDoctor\nTitle\nRatings\nQuality\n\n\n1\n1\nNinth\nRose\n7.5\nGood\n\n\n1\n2\nNinth\nThe End of the World\n7.6\nGood\n\n\n1\n3\nNinth\nThe Unquiet Dead\n7.5\nGood\n\n\n1\n4\nNinth\nAliens of London\n7  \nRegular\n\n\n1\n5\nNinth\nWorld War Three\n7  \nRegular\n\n\n1\n6\nNinth\nDalek\n8.7\nGreat\n\n\n\n\nFrom our data set we can see that we have information on the following:\n\nSeason Number\nEpisode Number\nEpisode Title\nIMDb User Rating\nCategorical Rating\n\nWe can do a few things with this data. First, lets see which doctor has the most episodes.\n\ndoctorwho %&gt;% \n  group_by(Doctor) %&gt;% \n  count(sort=T) |&gt; \n  hux() |&gt; \n  theme_article()\n\n\n\nDoctor\nn\n\n\nEleventh\n55\n\n\nTenth\n42\n\n\nTwelfth\n27\n\n\nThirteenth\n22\n\n\nNinth\n13\n\n\n\n\nThe eleventh doctor wins out here!\nNext it might be fun to see which season had the highest rating and then graph that.\n\n# These are the custom colors we will be using for our ratings\ndwcolor &lt;- \n  c(\"Bad\"=\"red2\", \"Garbage\" =\"dodgerblue2\", \n    \"Great\" =\"greenyellow\", \"Regular\"=\"darkorange1\", \n    \"Good\" =\"gold1\")\n\ndoctorwho |&gt; \n  group_by(Season) |&gt; \n  ggplot(aes(as.factor(Season),Ratings)) + \n  geom_point(aes(color = Quality),\n             alpha = .2) +\n  stat_summary(\n    fun = \"mean\",\n    geom = \"point\"\n  ) + \n  theme_minimal() +\n  theme(legend.position = \"none\",\n        axis.ticks = element_blank()) +\n  labs(x=\"\\nSeason\",y=\"Rating\\n\",\n       title=\"Doctor Who Average Season Rating\\n\",\n       caption=\"(based on IMDb User Ratings)\") +\n  theme(\n    plot.caption = \n      element_text(\n      face = \"italic\"),\n    plot.title = \n      element_text(\n      face = \"bold\")\n  ) +\n  #scale_color_manual(values = dwcolor)\n  scale_color_discrete()\n\n\n\n\n\n\n\nThe takeaway from this is that the last two seasons were rated as the worst with Season 4 being rated as the best.\nAnother question might be which Doctor has the highest rated episodes?\nLuckily we have a column with categorical information that tells us what ratings correspond to “Great”.\nHere is the system used: &lt; 5.0 = Garbage &lt; 6.5 = Bad &lt; 7.5 = Regular &lt; 8.5 = Good &lt; 10 = Great\nSo we could either filter(Ratings&gt;8.5) or we could filter(Quality==\"Great\").\nGrouping by Doctor ensures that the information of who the Doctor was that received that rating.\n\ndoctorwho %&gt;% \n  group_by(Doctor,Ratings) %&gt;% \n  filter(Quality==\"Great\") %&gt;% \n  group_by(Doctor) %&gt;% \n  count() %&gt;% \n  ggplot(aes(fct_reorder(Doctor,n),n,fill=Doctor,label = n)) +\n    geom_bar(stat=\"identity\") +\n    theme_minimal()+\n  coord_flip() +\n    theme(\n      axis.ticks = element_blank(),\n      legend.position = \"none\",\n      plot.caption = element_text(face = \"italic\"),\n      axis.text.x = element_blank(),\n      axis.text.y = element_text(face = \"bold\")\n      ) +\n    labs(x=\"\",y=\"\",\n         title=\"Number of 'Great' Episodes: Per Doctor\\n\",\n         captions=\"(based on IMDb User Ratings)\") +\n  scale_fill_viridis_d(alpha = .6) +\n  geom_label(color = \"black\") \n\n\n\n\n\n\n\nTo be honest, no surprise here either!\nLastly, let’s construct a heatmap of all of the episodes of Doctor Who.\n=\n\n# Plotly is a package add-on that will make our graph interactive\n# This is how it can be specially formatted\ndoctorwho_pltly &lt;- \n  doctorwho %&gt;% \n  mutate(text=\n           paste0(\"Season: \", Season, \"\\n\",\n                  \"Episode: \", EpisodeNumber,\"\\n\",\n                  \"Title: \", Title, \"\\n\",\n                  \"Doctor: \",Doctor))\n\nlibrary(ggtext)\np &lt;- \n  doctorwho %&gt;% \n  ggplot(aes(factor(Season),EpisodeNumber,fill=Quality)) +\n    geom_tile(colour=\"black\")+\n    geom_text(aes(label=Ratings))+\n    scale_fill_manual(values=dwcolor)+\n  theme_minimal()+\n  theme(axis.ticks = element_blank(),\n        plot.subtitle = element_markdown()) +\n    labs(x=\"Season\\n\",\n         y=\"\\nEpisode\",\n         title=\"Doctor Who IMDb Ratings: 2005-2020\",\n         subtitle = \"Ratings of the &lt;span style='color:#0072B2;'&gt;good&lt;/span&gt;\n         and &lt;span style='color:#009E73;'&gt;bad&lt;/span&gt;\")\n  \nggplotly(p)"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Hi, I’m Dave.",
    "section": "",
    "text": "I am a Lecturer, Lab Manager, and Internship Coordinator at Farmingdale State College. I am overly emphatic about R, music, and all things data!"
  },
  {
    "objectID": "metro/metro.html#hello-there",
    "href": "metro/metro.html#hello-there",
    "title": "Metropolis-Revealjs",
    "section": "Hello, There",
    "text": "Hello, There\nThis presentation will show you examples of what you can do with Quarto and Reveal.js, including:\n\nPresenting code and LaTeX equations\nIncluding computations in slide output\nImage, video, and iframe backgrounds\nFancy transitions and animations\nPrinting to PDF\n\n…and much more"
  },
  {
    "objectID": "metro/metro.html#pretty-code",
    "href": "metro/metro.html#pretty-code",
    "title": "Metropolis-Revealjs",
    "section": "Pretty Code",
    "text": "Pretty Code\n\nOver 20 syntax highlighting themes available\nDefault theme optimized for accessibility\n\n# Define a server for the Shiny app\nfunction(input, output) {\n  \n  # Fill in the spot we created for a plot\n  output$phonePlot &lt;- renderPlot({\n    # Render a barplot\n  })\n}\n\nLearn more: Syntax Highlighting"
  },
  {
    "objectID": "metro/metro.html#code-animations",
    "href": "metro/metro.html#code-animations",
    "title": "Metropolis-Revealjs",
    "section": "Code Animations",
    "text": "Code Animations\n\nOver 20 syntax highlighting themes available\nDefault theme optimized for accessibility\n\n# Define a server for the Shiny app\nfunction(input, output) {\n  \n  # Fill in the spot we created for a plot\n  output$phonePlot &lt;- renderPlot({\n    # Render a barplot\n    barplot(WorldPhones[,input$region]*1000, \n            main=input$region,\n            ylab=\"Number of Telephones\",\n            xlab=\"Year\")\n  })\n}\n\nLearn more: Code Animations"
  },
  {
    "objectID": "metro/metro.html#line-highlighting",
    "href": "metro/metro.html#line-highlighting",
    "title": "Metropolis-Revealjs",
    "section": "Line Highlighting",
    "text": "Line Highlighting\n\nHighlight specific lines for emphasis\nIncrementally highlight additional lines\n\nimport numpy as np\nimport matplotlib.pyplot as plt\nr = np.arange(0, 2, 0.01)\ntheta = 2 * np.pi * r\nfig, ax = plt.subplots(subplot_kw={'projection': 'polar'})\nax.plot(theta, r)\nax.set_rticks([0.5, 1, 1.5, 2])\nax.grid(True)\nplt.show()\n\nLearn more: Line Highlighting"
  },
  {
    "objectID": "metro/metro.html#executable-code",
    "href": "metro/metro.html#executable-code",
    "title": "Metropolis-Revealjs",
    "section": "Executable Code",
    "text": "Executable Code\n\nlibrary(ggplot2)\nggplot(mtcars, aes(hp, mpg, color = am)) +\n  geom_point() +\n  geom_smooth(formula = y ~ x, method = \"loess\")\n\n\n\nLearn more: Executable Code"
  },
  {
    "objectID": "metro/metro.html#latex-equations",
    "href": "metro/metro.html#latex-equations",
    "title": "Metropolis-Revealjs",
    "section": "LaTeX Equations",
    "text": "LaTeX Equations\nMathJax rendering of equations to HTML\n\n\n\\begin{gather*}\na_1=b_1+c_1\\\\\na_2=b_2+c_2-d_2+e_2\n\\end{gather*}\n\\begin{align}\na_{11}& =b_{11}&\n  a_{12}& =b_{12}\\\\\na_{21}& =b_{21}&\n  a_{22}& =b_{22}+c_{22}\n\\end{align}\n\n\\[\\begin{gather*}\na_1=b_1+c_1\\\\\na_2=b_2+c_2-d_2+e_2\n\\end{gather*}\\]\n\\[\\begin{align}\na_{11}& =b_{11}&\n  a_{12}& =b_{12}\\\\\na_{21}& =b_{21}&\n  a_{22}& =b_{22}+c_{22}\n\\end{align}\\]\n\n\n\nLearn more: LaTeX Equations"
  },
  {
    "objectID": "metro/metro.html#column-layout",
    "href": "metro/metro.html#column-layout",
    "title": "Metropolis-Revealjs",
    "section": "Column Layout",
    "text": "Column Layout\nArrange content into columns of varying widths:\n\n\nMotor Trend Car Road Tests\nThe data was extracted from the 1974 Motor Trend US magazine, and comprises fuel consumption and 10 aspects of automobile design and performance for 32 automobiles.\n\n\n\n\nknitr::kable(head(mtcars)[,c(\"mpg\", \"cyl\", \"disp\", \"hp\", \"wt\")])\n\n\n\n\n\nmpg\ncyl\ndisp\nhp\nwt\n\n\n\n\nMazda RX4\n21.0\n6\n160\n110\n2.620\n\n\nMazda RX4 Wag\n21.0\n6\n160\n110\n2.875\n\n\nDatsun 710\n22.8\n4\n108\n93\n2.320\n\n\nHornet 4 Drive\n21.4\n6\n258\n110\n3.215\n\n\nHornet Sportabout\n18.7\n8\n360\n175\n3.440\n\n\nValiant\n18.1\n6\n225\n105\n3.460\n\n\n\n\n\n\n\n\nLearn more: Multiple Columns"
  },
  {
    "objectID": "metro/metro.html#incremental-lists",
    "href": "metro/metro.html#incremental-lists",
    "title": "Metropolis-Revealjs",
    "section": "Incremental Lists",
    "text": "Incremental Lists\nLists can optionally be displayed incrementally:\n\n\nFirst item\nSecond item\nThird item\n\n\n\n Insert pauses to make other types of content display incrementally.\n\nLearn more: Incremental Lists"
  },
  {
    "objectID": "metro/metro.html#fragments",
    "href": "metro/metro.html#fragments",
    "title": "Metropolis-Revealjs",
    "section": "Fragments",
    "text": "Fragments\nIncremental text display and animation with fragments:\n\n\nFade in\n\n\nSlide up while fading in\n\n\nSlide left while fading in\n\n\nFade in then semi out\n\n\n\nStrike\n\n\nHighlight red\n\n\nLearn more: Fragments"
  },
  {
    "objectID": "metro/metro.html#slide-backgrounds",
    "href": "metro/metro.html#slide-backgrounds",
    "title": "Metropolis-Revealjs",
    "section": "Slide Backgrounds",
    "text": "Slide Backgrounds\nSet the background attribute on a slide to change the background color (all CSS color formats are supported).\nDifferent background transitions are available via the background-transition option.\n\nLearn more: Slide Backgrounds"
  },
  {
    "objectID": "metro/metro.html#media-backgrounds",
    "href": "metro/metro.html#media-backgrounds",
    "title": "Metropolis-Revealjs",
    "section": "Media Backgrounds",
    "text": "Media Backgrounds\nYou can also use the following as a slide background:\n\nAn image: background-image\nA video: background-video\nAn iframe: background-iframe\n\n\nLearn more: Media Backgrounds"
  },
  {
    "objectID": "metro/metro.html#absolute-position",
    "href": "metro/metro.html#absolute-position",
    "title": "Metropolis-Revealjs",
    "section": "Absolute Position",
    "text": "Absolute Position\nPosition images or other elements at precise locations\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nLearn more: Absolute Position"
  },
  {
    "objectID": "metro/metro.html#auto-animate",
    "href": "metro/metro.html#auto-animate",
    "title": "Metropolis-Revealjs",
    "section": "Auto-Animate",
    "text": "Auto-Animate\nAutomatically animate matching elements across slides with Auto-Animate.\n\n\n\n\n\n\n\n\n\n\n\n\nLearn more: Auto-Animate"
  },
  {
    "objectID": "metro/metro.html#auto-animate-1",
    "href": "metro/metro.html#auto-animate-1",
    "title": "Metropolis-Revealjs",
    "section": "Auto-Animate",
    "text": "Auto-Animate\nAutomatically animate matching elements across slides with Auto-Animate.\n\n\n\n\n\n\n\n\n\n\n\n\nLearn more: Auto-Animate"
  },
  {
    "objectID": "metro/metro.html#slide-transitions",
    "href": "metro/metro.html#slide-transitions",
    "title": "Metropolis-Revealjs",
    "section": "Slide Transitions",
    "text": "Slide Transitions\nThe next few slides will transition using the slide transition\n\n\n\n\n\n\n\nTransition\nDescription\n\n\n\n\nnone\nNo transition (default, switch instantly)\n\n\nfade\nCross fade\n\n\nslide\nSlide horizontally\n\n\nconvex\nSlide at a convex angle\n\n\nconcave\nSlide at a concave angle\n\n\nzoom\nScale the incoming slide so it grows in from the center of the screen.\n\n\n\n\nLearn more: Slide Transitions"
  },
  {
    "objectID": "metro/metro.html#tabsets",
    "href": "metro/metro.html#tabsets",
    "title": "Metropolis-Revealjs",
    "section": "Tabsets",
    "text": "Tabsets\n\nPlotData\n\n\n\nlibrary(ggplot2)\nggplot(mtcars, aes(hp, mpg, color = am)) +\n  geom_point() +\n  geom_smooth(formula = y ~ x, method = \"loess\")\n\n\n\n\n\n\n\n\n\n\n\nknitr::kable(mtcars)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nmpg\ncyl\ndisp\nhp\ndrat\nwt\nqsec\nvs\nam\ngear\ncarb\n\n\n\n\nMazda RX4\n21.0\n6\n160.0\n110\n3.90\n2.620\n16.46\n0\n1\n4\n4\n\n\nMazda RX4 Wag\n21.0\n6\n160.0\n110\n3.90\n2.875\n17.02\n0\n1\n4\n4\n\n\nDatsun 710\n22.8\n4\n108.0\n93\n3.85\n2.320\n18.61\n1\n1\n4\n1\n\n\nHornet 4 Drive\n21.4\n6\n258.0\n110\n3.08\n3.215\n19.44\n1\n0\n3\n1\n\n\nHornet Sportabout\n18.7\n8\n360.0\n175\n3.15\n3.440\n17.02\n0\n0\n3\n2\n\n\nValiant\n18.1\n6\n225.0\n105\n2.76\n3.460\n20.22\n1\n0\n3\n1\n\n\nDuster 360\n14.3\n8\n360.0\n245\n3.21\n3.570\n15.84\n0\n0\n3\n4\n\n\nMerc 240D\n24.4\n4\n146.7\n62\n3.69\n3.190\n20.00\n1\n0\n4\n2\n\n\nMerc 230\n22.8\n4\n140.8\n95\n3.92\n3.150\n22.90\n1\n0\n4\n2\n\n\nMerc 280\n19.2\n6\n167.6\n123\n3.92\n3.440\n18.30\n1\n0\n4\n4\n\n\nMerc 280C\n17.8\n6\n167.6\n123\n3.92\n3.440\n18.90\n1\n0\n4\n4\n\n\nMerc 450SE\n16.4\n8\n275.8\n180\n3.07\n4.070\n17.40\n0\n0\n3\n3\n\n\nMerc 450SL\n17.3\n8\n275.8\n180\n3.07\n3.730\n17.60\n0\n0\n3\n3\n\n\nMerc 450SLC\n15.2\n8\n275.8\n180\n3.07\n3.780\n18.00\n0\n0\n3\n3\n\n\nCadillac Fleetwood\n10.4\n8\n472.0\n205\n2.93\n5.250\n17.98\n0\n0\n3\n4\n\n\nLincoln Continental\n10.4\n8\n460.0\n215\n3.00\n5.424\n17.82\n0\n0\n3\n4\n\n\nChrysler Imperial\n14.7\n8\n440.0\n230\n3.23\n5.345\n17.42\n0\n0\n3\n4\n\n\nFiat 128\n32.4\n4\n78.7\n66\n4.08\n2.200\n19.47\n1\n1\n4\n1\n\n\nHonda Civic\n30.4\n4\n75.7\n52\n4.93\n1.615\n18.52\n1\n1\n4\n2\n\n\nToyota Corolla\n33.9\n4\n71.1\n65\n4.22\n1.835\n19.90\n1\n1\n4\n1\n\n\nToyota Corona\n21.5\n4\n120.1\n97\n3.70\n2.465\n20.01\n1\n0\n3\n1\n\n\nDodge Challenger\n15.5\n8\n318.0\n150\n2.76\n3.520\n16.87\n0\n0\n3\n2\n\n\nAMC Javelin\n15.2\n8\n304.0\n150\n3.15\n3.435\n17.30\n0\n0\n3\n2\n\n\nCamaro Z28\n13.3\n8\n350.0\n245\n3.73\n3.840\n15.41\n0\n0\n3\n4\n\n\nPontiac Firebird\n19.2\n8\n400.0\n175\n3.08\n3.845\n17.05\n0\n0\n3\n2\n\n\nFiat X1-9\n27.3\n4\n79.0\n66\n4.08\n1.935\n18.90\n1\n1\n4\n1\n\n\nPorsche 914-2\n26.0\n4\n120.3\n91\n4.43\n2.140\n16.70\n0\n1\n5\n2\n\n\nLotus Europa\n30.4\n4\n95.1\n113\n3.77\n1.513\n16.90\n1\n1\n5\n2\n\n\nFord Pantera L\n15.8\n8\n351.0\n264\n4.22\n3.170\n14.50\n0\n1\n5\n4\n\n\nFerrari Dino\n19.7\n6\n145.0\n175\n3.62\n2.770\n15.50\n0\n1\n5\n6\n\n\nMaserati Bora\n15.0\n8\n301.0\n335\n3.54\n3.570\n14.60\n0\n1\n5\n8\n\n\nVolvo 142E\n21.4\n4\n121.0\n109\n4.11\n2.780\n18.60\n1\n1\n4\n2\n\n\n\n\n\n\n\n\n\nLearn more: Tabsets"
  },
  {
    "objectID": "metro/metro.html#preview-links",
    "href": "metro/metro.html#preview-links",
    "title": "Metropolis-Revealjs",
    "section": "Preview Links",
    "text": "Preview Links\nNavigate to hyperlinks without disrupting the flow of your presentation.\nUse the preview-links option to open links in an iframe on top of your slides. Try clicking the link below for a demonstration:\n\nMatplotlib: Visualization with Python\n\n\nLearn more: Preview Links"
  },
  {
    "objectID": "metro/metro.html#themes",
    "href": "metro/metro.html#themes",
    "title": "Metropolis-Revealjs",
    "section": "Themes",
    "text": "Themes\n10 Built-in Themes (or create your own)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nLearn more: Themes"
  },
  {
    "objectID": "metro/metro.html#easy-navigation",
    "href": "metro/metro.html#easy-navigation",
    "title": "Metropolis-Revealjs",
    "section": "Easy Navigation",
    "text": "Easy Navigation\n\nQuickly jump to other parts of your presentation\n\n\n\n\n\n\n\n\n\nToggle the slide menu with the menu button (bottom left of slide) to go to other slides and access presentation tools.\n\n\n\nYou can also press m to toggle the menu open and closed.\n\nLearn more: Navigation"
  },
  {
    "objectID": "metro/metro.html#chalkboard",
    "href": "metro/metro.html#chalkboard",
    "title": "Metropolis-Revealjs",
    "section": "Chalkboard",
    "text": "Chalkboard\n\nFree form drawing and slide annotations\n\n\n\n\n\n\n\n\n\nUse the chalkboard button at the bottom left of the slide to toggle the chalkboard.\n\n\n\n\n\n\n\n\n\n\n\nUse the notes canvas button at the bottom left of the slide to toggle drawing on top of the current slide.\n\n\n\nYou can also press b to toggle the chalkboard or c to toggle the notes canvas.\n\nLearn more: Chalkboard"
  },
  {
    "objectID": "metro/metro.html#point-of-view",
    "href": "metro/metro.html#point-of-view",
    "title": "Metropolis-Revealjs",
    "section": "Point of View",
    "text": "Point of View\nPress o to toggle overview mode:\n\nHold down the Alt key (or Ctrl in Linux) and click on any element to zoom towards it—try it now on this slide.\n\nLearn more: Overview Mode, Slide Zoom"
  },
  {
    "objectID": "metro/metro.html#speaker-view",
    "href": "metro/metro.html#speaker-view",
    "title": "Metropolis-Revealjs",
    "section": "Speaker View",
    "text": "Speaker View\nPress s (or use the presentation menu) to open speaker view\n\n\nLearn more: Speaker View"
  },
  {
    "objectID": "metro/metro.html#authoring-tools",
    "href": "metro/metro.html#authoring-tools",
    "title": "Metropolis-Revealjs",
    "section": "Authoring Tools",
    "text": "Authoring Tools\nLive side-by-side preview for any notebook or text editor including Jupyter and VS Code\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nLearn more: Jupyter, VS Code, Text Editors"
  },
  {
    "objectID": "metro/metro.html#authoring-tools-1",
    "href": "metro/metro.html#authoring-tools-1",
    "title": "Metropolis-Revealjs",
    "section": "Authoring Tools",
    "text": "Authoring Tools\nRStudio includes an integrated presentation preview pane\n\n\nLearn more: RStudio"
  },
  {
    "objectID": "metro/metro.html#reference-and-footnotes",
    "href": "metro/metro.html#reference-and-footnotes",
    "title": "Metropolis-Revealjs",
    "section": "Reference and Footnotes",
    "text": "Reference and Footnotes\n\nGreen 1\nBrown\nPurple\n\n\n\nSome additional commentary of more peripheral interest.\nA footnote"
  },
  {
    "objectID": "metro/metro.html#and-more",
    "href": "metro/metro.html#and-more",
    "title": "Metropolis-Revealjs",
    "section": "And More…",
    "text": "And More…\n\nTouch optimized (presentations look great on mobile, swipe to navigate slides)\nFooter & Logo (optionally specify custom footer per-slide)\nAuto-Slide (step through slides automatically, without any user input)\nMultiplex (allows your audience to follow the slides of the presentation you are controlling on their own phone, tablet or laptop).\n\n\nLearn more: Quarto Presentations\n\n\n\n\nhttps://quarto.org"
  },
  {
    "objectID": "basictut.html",
    "href": "basictut.html",
    "title": "Basic Operations",
    "section": "",
    "text": "Note\n\n\n\nNote: Today we will go through how to install R-Studio, use the console for basic math, and store expressions and calculations as variables.."
  },
  {
    "objectID": "basictut.html#installing-and-navigating-r-and-r-studio",
    "href": "basictut.html#installing-and-navigating-r-and-r-studio",
    "title": "Basic Operations",
    "section": "Installing and Navigating R and R-Studio",
    "text": "Installing and Navigating R and R-Studio\n\n\n\n\n\n\nImportant\n\n\n\nIn order to get the confusion out of the way, when we are working in R-Studio, we are going to just call it R. There are two distinct programs, R and R-Studio. The differences is that R does not have a Graphical User Interface. This means that there are no dialog boxes or viewer panes built in. I prefer using R-Studio because it alots a few more options to the user.\n\n\n\nYou will first need to install R. Make sure to note the operating system you are working on when doing so.\nOnce R is installed, you will need to install R-Studio.\nWhen you open R you will see that there are three large boxes on the screen. The largest box on the left is the Console. This is where whatever you type will be evaluated by the program and when you press Enter, a result will appear below what you have typed.\n\n\n\n\n\n\n\nNote\n\n\n\nTry it out: Type your name into the console and press Enter. Do you notice that you get an error message? Why do you think this is?\n\n\n\nThe area on the right is divided into two parts: A tabset with the options; Environment,History,Connections, and Build. Additionally, there is a tabset directly below with the options; Files, Plots, Packages, Help, and Viewer.\n\nFor the moment, we will only be paying attention to the Console.\nBasic Math\nIt may seem trivial at first, but it is good to know that the Console in R has an interface that acts as a calculator. The green text is what is typed into the console, and the black text, preceded by [1] is the result of the expression.\nLoading\n  webR...\n\n\n  \n\nLoading\n  webR...\n\n\n  \n\nLoading\n  webR...\n\n\n  \n\nLoading\n  webR...\n\n\n  \n\nLoading\n  webR...\n\n\n  \n\nR will also follow the order of expressions, or how must of us know it: PEMDAS (Parentheses, exponents, multiplication, division, addition, and subtraction). This is especially important if you ever do a long formula.\nLoading\n  webR...\n\n\n  \n\nVariables\nAny expression you type into the console can be stored as a variable, which can be called later on. These variables can also be used in conjunction with different math expressions. It is important to note that when creating a variable, the variable can be used interchangably with the number(s) stored inside of it.\n\n\n\n\n\n\nNote\n\n\n\nNote that the way we assign a number or object to a variable is by using &lt;-. You can also use =, but as you will see in later seminars, the former option is a little more powerful.\nYou can use the shortcut: Option + Minus (Mac) | Alt + Minus (PC)\n\n\nLoading\n  webR...\n\n\n  \n\nLoading\n  webR...\n\n\n  \n\n\n\n\n\n\n\nTip\n\n\n\nTry it out: Create a variable called Name and have this equal your name. After you have done, type the variable Name and press enter.\n\n\nLoading\n  webR...\n\n\n  \n\nYou most likley got an error message. Here is why…\nData Types\nIn R, there are different data types or classes that R will recognize. We will first focus on Numeric and Character. Take note of the class()function that identify how R evalutes this variable.\nLoading\n  webR...\n\n\n  \n\nLoading\n  webR...\n\n\n  \n\nNow that we know that R evaluates different types of data in different ways, let us try out the Name exercise again.\nLoading\n  webR...\n\n\n  \n\nPerfect!\nThe reason that it would not work before is because R has no way of knowing what you are trying to type unless you explicitly tell it that you are trying to type a name, which is a character, denoted by two quotation marks.\n\n\n\n\n\n\nTip\n\n\n\nTry it out: Create a variable with the following numbers: 1,1,2,3,5,8,13 and store it under the name Fib. Type Fib back into the console and press Enter.\n\n\nYou probably were greeted with another error message. This is because R has no way of knowing that you want to display 7 distinct numbers. To get around this we have to do something called \"concatenation\".\nIf we want to create a variable with more than one number, or object, inside of it we need to concatenate or combine that data first. In R this is done using the c() function. We can also call an object containing several unique numbers, a vector.\nLoading\n  webR...\n\n\n  \n\nBy using the c() function, we are telling R to take these numbers (separated by a comma) and combine them so that they are all included in the variable, but still have their individuality.\nIf you wanted to see what the 5th number was in the Fib, you would put a bracket []next to the variable name. Inside of the brackets you would put the position you wanted to see.\nLoading\n  webR...\n\n\n  \n\n\n\n\n\n\n\nTip\n\n\n\nTry it out: Create a numeric vector named Add3 containing the numbers, 1,4,6,9. How could we go about adding 3 to each number in this vector?\n\n\n\n\n\n\n\n\nNote\n\n\n\nIt was mentioned before that the variables take on the properties of the objects in which they are created from. What this means is that if I declare x &lt;- 3, x + 3, my result should be 6. With this in mind, the same should work on a group of numbers.\n\n\nLoading\n  webR...\n\n\n  \n\n\n\n\n\n\n\nImportant\n\n\n\nThis is especially helpful when you are dealing with data that you need to transform. We will learn about data transformation in later seminars."
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "R",
    "section": "",
    "text": "Basic Tutorials\nThis section is for tutorials that focus on introductory topics using R. In most cases, I wanted to do something and couldn’t figure out how and by scouring online I eventually found it and I hope to be able to replicate that for someone!\n\nBasic Operations\n\nIn this seminar, we will go over how to install, and use R-Studio. We will discuss the different classes of data (integer, numeric, string, matrix,and data frame), as well as how to perform simple math and store data in vectors and variables.\n\nIntroduction to Descriptive Statistics\n\nIn this seminar, we will go over how to create a data set to work with using the rnorm() and pnorm() functions. We will use the functions mean, median, and range to get measures of central tendency.\n\nString Manipulation using stringr and regular expressions.\n\nExtracting text from a string, determining the length of a string, as well as generating text according to a pattern. A brief introduction to regular expressions.\n\nPlotting using ggplot2\n\nA better alternative to the base plotting system found in R. You are given the ability to add several graphing geometries and modifying axis labels, etc.\n\n\nIn-Depth Tutorials\nThis section is devoted to going a bit more in depth: - Moving away from the base plotting system - Working exclusively with dplyr and the tidyverse ecosystem.\n\nVisualizations: stringr\n\nUsing the stringr::words, and stringr::sentences  datasets, we can see how to create new variables and examine the characteristics that make up these string oriented datasets using dplyr and ggplot2.\n\nVisualizations: babynames\n\nSeeing how unique names exist in the babynames dataset is easy when you combine it with dplyr and stringr. Additional layers in ggplot2 are shown which help make a readable, and pretty graph.\n\nVisualizations: TV Show Ratings\n\nUsing read_html and geom_tile to scrape relevant information from a specified website to create a dataset that lists the Season, Episode Name, and User Rating of a TV show to then create a heatmap of the ratings per season, per episode."
  },
  {
    "objectID": "baby.html",
    "href": "baby.html",
    "title": "babynames",
    "section": "",
    "text": "Introduction\n\nWe will be using the babynames dataset to explore the dplyr and ggplot2 package.\nFirst, let us take a look at the babynames dataset.\n\nlibrary(stringr)\nlibrary(gganimate)\nlibrary(ggplot2)\nlibrary(babynames)\nlibrary(dplyr)\nlibrary(forcats)\n# Preview of what the dataset looks like \nhead(babynames)\n\n# A tibble: 6 × 5\n   year sex   name          n   prop\n  &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt;     &lt;int&gt;  &lt;dbl&gt;\n1  1880 F     Mary       7065 0.0724\n2  1880 F     Anna       2604 0.0267\n3  1880 F     Emma       2003 0.0205\n4  1880 F     Elizabeth  1939 0.0199\n5  1880 F     Minnie     1746 0.0179\n6  1880 F     Margaret   1578 0.0162\n\n\nThe table is structured in the following:\n\nYear: The year the name was recorded\nName: The assigned sex of the recorded individual\nn: The number of recorded people with the name\nprop: n divided by total number of applicants in that year, which means proportions are of people of that gender with that name born in that year 1\n\nThere are a myriad of questions we could ask here!\n\nHow many unique names are there?\nWhat is the most common name?\nDo Male or Females represent the majority of unique names?\nHow many unique names do each letter of the alphabet account for?\nHow many unique names are there?\n\nWe will need to use dplyr and distinct in order to find the number of unique names, or else we will run into an issue in which multiple instances of a name will be counted–thereby obscuring the actual number.\n\nbabynames |&gt; \n  # Get data ready to be sorted by name\n  group_by(name) |&gt; \n  # Count how many times each name appears\n  count()\n\n# A tibble: 97,310 × 2\n# Groups:   name [97,310]\n   name          n\n   &lt;chr&gt;     &lt;int&gt;\n 1 Aaban        10\n 2 Aabha         5\n 3 Aabid         2\n 4 Aabir         1\n 5 Aabriella     5\n 6 Aada          1\n 7 Aadam        26\n 8 Aadan        11\n 9 Aadarsh      17\n10 Aaden        18\n# … with 97,300 more rows\n\n\nYou can see from the n column that this is reporting mulitple instances of each name. This does inadvertedly answer one of our other questions:\nWhich name appears most often throughout the years from 1880-2017?\n\n\nbabynames |&gt; \n  group_by(name) |&gt; \n  # Sort the data from largest to smallest\n  count(sort=T)\n\n# A tibble: 97,310 × 2\n# Groups:   name [97,310]\n   name        n\n   &lt;chr&gt;   &lt;int&gt;\n 1 Francis   276\n 2 James     276\n 3 Jean      276\n 4 Jesse     276\n 5 Jessie    276\n 6 John      276\n 7 Johnnie   276\n 8 Joseph    276\n 9 Lee       276\n10 Leslie    276\n# … with 97,300 more rows\n\n\nIt is also helpful to understand that this represents the number of occurrences throughout the years, it does not tell us the associated n's with each name, we will do that soon!\nBack to our original question: we need to remove all instances of a repeated name. We can do this with the distinct function.\ndistinct uses the following argurments:\n\ndata - What variable do you want to collect distinct values from?\n.keep_all(logical) - Can either be TRUE/T or FALSE/F which determines whether the other variables should remain.\n\nHere is an example using generated data first:\n\n# Take a sample of letters from the alphabet with replacement\nx &lt;- sample(letters,50,replace = T)\ny &lt;- round(runif(50,5,100))\n# Prevent the string constants from being treated as factors\nxy &lt;- data.frame(x,y,stringsAsFactors = F)\n# Find the distinct values\nxy |&gt; distinct(x)\n\n   x\n1  n\n2  x\n3  l\n4  e\n5  v\n6  p\n7  g\n8  a\n9  z\n10 w\n11 j\n12 i\n13 h\n14 d\n15 c\n16 r\n17 f\n18 q\n19 m\n20 o\n21 y\n\n\nYou will notice that we lost everything in the y column! We need to use the .keep_all() argument.\n\n# Take a sample of letters from the alphabet with replacement\nx &lt;- sample(letters,50,replace = T)\ny &lt;- round(runif(50,5,100))\n# Prevent the string constants from being treated as factors\nxy &lt;- data.frame(x,y,stringsAsFactors = F)\n# Find the distinct values\nxy |&gt; \n  distinct(x,.keep_all = T) |&gt; \n  group_by(x) |&gt; \n  arrange(x)\n\n# A tibble: 23 × 2\n# Groups:   x [23]\n   x         y\n   &lt;chr&gt; &lt;dbl&gt;\n 1 a        77\n 2 b        41\n 3 c        89\n 4 d        94\n 5 e        94\n 6 f        88\n 7 g        29\n 8 h        58\n 9 i        47\n10 j        98\n# … with 13 more rows\n\n\nSo now we will do the same with the babynames dataset to find the number of distinct names.\n\nbabynames |&gt; \n  # Remove all duplicated names, but keep the other variables\n  distinct(name,.keep_all = T)\n\n# A tibble: 97,310 × 5\n    year sex   name          n   prop\n   &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt;     &lt;int&gt;  &lt;dbl&gt;\n 1  1880 F     Mary       7065 0.0724\n 2  1880 F     Anna       2604 0.0267\n 3  1880 F     Emma       2003 0.0205\n 4  1880 F     Elizabeth  1939 0.0199\n 5  1880 F     Minnie     1746 0.0179\n 6  1880 F     Margaret   1578 0.0162\n 7  1880 F     Ida        1472 0.0151\n 8  1880 F     Alice      1414 0.0145\n 9  1880 F     Bertha     1320 0.0135\n10  1880 F     Sarah      1288 0.0132\n# … with 97,300 more rows\n\n\nAgain we see the same 97,310 we saw previously! This tells us that the function worked. Now let us try to answer the following question:\nHow many unique names do each letter of the alphabet account for?\n\nFor this we will need to create a new variable: sw, that represents the letter the name starts with.\nWe will do this using muatate and regular expressions, which are covered here. We will then need to repeat what we did by only returning the distinct names in the set.\nWhen the data is in this format, we will then group_by the new variable, sw and count.\n\nbabynames |&gt; \n  # Create new column that looks for the start of each name\n  mutate(sw=unlist(str_match_all(name,\"^.\"))) |&gt; \n  # Remove duplicate names\n  distinct(name,.keep_all = T) |&gt; \n  # Sort by the starting letter\n  group_by(sw) |&gt; \n  # Sort by largest to smallest\n  count(sort=T)\n\n# A tibble: 26 × 2\n# Groups:   sw [26]\n   sw        n\n   &lt;chr&gt; &lt;int&gt;\n 1 A     10292\n 2 S      7931\n 3 J      7817\n 4 M      7529\n 5 K      7283\n 6 D      6574\n 7 T      6278\n 8 L      5744\n 9 C      5731\n10 R      4429\n# … with 16 more rows\n\n\nAwesome! We can see that the letter A dominates the other letters.\nNow we can throw this into a graph:\n\nbabynames |&gt; \n  mutate(sw=unlist(str_match_all(name,\"^.\"))) |&gt; \n  distinct(name,.keep_all = T) |&gt; \n  group_by(sw) |&gt; \n  count(sort=T) |&gt; \n  # fct_rev will make it A-Z rather than Z-A\n  ggplot(aes(fct_rev(sw),n,fill=n)) +\n    # Use a bar chart\n    geom_bar(stat=\"identity\") +\n    # Flip for better view\n    coord_flip() +\n    # Fill based on category\n    scale_fill_continuous() +\n    # Super cool theme\n    theme_minimal() +\n    # Remove legend and axis ticks\n    theme(legend.position = \"none\",\n          axis.ticks = element_blank())+\n    # No need for axis labels, give title and caption\n    labs(x=\"\",y=\"\",\n         title=\"Number of Unique Names Per Letter\",\n         caption=\"(based on {babynames})\")\n\n\n\n\n\n\n\nCool!\nNow let us take a look at how many unique names are Male and how many are Female.\n\nbabynames |&gt; \n  mutate(sw=unlist(str_match_all(name,\"^.\"))) |&gt; \n  distinct(name,.keep_all = T) |&gt; \n  # Sort by sex for easy filtering\n  group_by(sex) |&gt; \n  # Get the number of each sex\n  count() |&gt; \n  ggplot(aes(sex,n,fill=sex)) +\n    geom_bar(stat=\"identity\") +\n    coord_flip() +\n    theme_minimal()+\n    theme(axis.ticks = element_blank(),\n          legend.position = \"bottom\")+\n    labs(x=\"Sex\",y=\"\",\n         title=\"Unique Names Attributed to Sex\",\n         caption=\"(based on babynames)\")+\n  # Manually fill colors\n  scale_fill_manual(values=c(\"#8700F9\",\"#00C4AA\"))\n\n\n\n\n\n\n\nWe can see that females have almost double the amount of unique names!\nWhile going through the dataset I noticed that even after removing duplicate names I was still seeing name doubles. I realized that this was because some exist have both male and female owners.\nThe arranging of this particular question was a little difficult for me so I went over to Reddit where a helpful user, PM_ME_CAREER_CHOICES was able to guide me in the right direction.\n\nbabynames |&gt; \n  distinct(sex,name,.keep_all = T) |&gt; \n  group_by(name) |&gt; \n  count() |&gt; \n  # If a name is truly unique it should be n = 1\n  filter(n ==2) \n\n# A tibble: 10,663 × 2\n# Groups:   name [10,663]\n   name        n\n   &lt;chr&gt;   &lt;int&gt;\n 1 Aaden       2\n 2 Aadi        2\n 3 Aadyn       2\n 4 Aalijah     2\n 5 Aaliyah     2\n 6 Aaliyan     2\n 7 Aamari      2\n 8 Aamir       2\n 9 Aaren       2\n10 Aareon      2\n# … with 10,653 more rows\n\n\nWe can see from this table that there are 10,763 names that have both male and female owners. Pretty cool!\nWhat name(s) has the most owners (dead and alive)\n\nNext we can take a look at what names have the most number of owners.\nWe will do this by summing up every occurence of a name and then sorting them to get each names total count.\n\nbabynames |&gt; \n    group_by(sex,name) |&gt; \n    # Create column that adds up every n instance of a name\n    summarise(Total=sum(n)) |&gt; \n    # Arrange in descending order the total number \n    arrange(desc(Total))\n\n`summarise()` has grouped output by 'sex'. You can override using the `.groups`\nargument.\n\n\n# A tibble: 107,973 × 3\n# Groups:   sex [2]\n   sex   name      Total\n   &lt;chr&gt; &lt;chr&gt;     &lt;int&gt;\n 1 M     James   5150472\n 2 M     John    5115466\n 3 M     Robert  4814815\n 4 M     Michael 4350824\n 5 F     Mary    4123200\n 6 M     William 4102604\n 7 M     David   3611329\n 8 M     Joseph  2603445\n 9 M     Richard 2563082\n10 M     Charles 2386048\n# … with 107,963 more rows\n\n\nLet's see if we answered all of the questions!\n\n\nHow many unique names are there?\n\nThere are 97,310 unique names.\n\n\n\nWhat is the most common name?\n\nThe most common name, or the name with the most owners appears to be James–with a whopping 5,150,472!\n\n\n\nDo Male or Females represent the majority of unique names?\n\nFemales dominate the name ownership game with 61,832.\n\n\n\nHow many unique names do each letter of the alphabet account for?\n\nSince there are 26 values–I'll point you in the direction of the graph!\n\n\n\nLet's finish up with a animated graph using the gganimate package.\n\nbabynames |&gt; \n    # Choose Specifc Name\n    filter(name==\"David\") |&gt; \n    # Choose Sex (we know ~10% of names are M and F)\n    filter(sex==\"M\") |&gt; \n    # Notice how we group by name, so the line will follow\n    ggplot(aes(year,n,group=name,color=name)) +\n    # Plot the points\n    geom_point() +\n    # Plot a line to connect the points\n    geom_line() +\n    # Cool Theme\n    theme_minimal() +\n    labs(y=\"Total Count\",x=\"Year\",\n         title=paste(\"Popularity of the name David from 1880-2017\")) +\n    # Remove ticks and legend\n    theme(axis.ticks = element_blank(),\n        legend.title = element_blank()) +\n    # gganimate will use this to go from each year as its own graph\n  transition_reveal(year)\n\n`geom_line()`: Each group consists of only one observation.\nℹ Do you need to adjust the group aesthetic?\n`geom_line()`: Each group consists of only one observation.\nℹ Do you need to adjust the group aesthetic?\n\n\n\n\n\n\n\n\n\nbabynames |&gt; \n  filter(name==\"David\") |&gt; \n    # Choose Sex (we know ~10% of names are M and F)\n    filter(sex==\"M\") |&gt; \n    # Notice how we group by name, so the line will follow\n    ggplot(aes(year,n,group=name,color=name)) +\n    # Plot the points\n    geom_point() +\n    # Plot a line to connect the points\n    geom_line() +\n    # Cool Theme\n    theme_minimal()"
  },
  {
    "objectID": "descript.html",
    "href": "descript.html",
    "title": "Descriptive Statistics",
    "section": "",
    "text": "** Introduction to R-Studio: Descriptive Statistics**\n\n\n\n\n\n\nNote\n\n\n\nNote: Today we will go over how to create a data set to work with using the rnorm and pnorm functions. We will use the functions mean, median, and range to get measures of central tendency.\n\n\n\nData Generation\n\n\n\n\n\n\nTip\n\n\n\nWhen we do not have data to work with, we can create it ourselves. It is important to note that this is only useful, and ethical, when we are doing it for instructional purposes!\n\n\nThe function rnorm has a few arguments that help specify the type of data that it will return: - rnorm(n,mean,sd) - n = number of observations - mean = desired mean of the sample - sd = desired standard deviation of the sample\nLoading\n  webR...\n\n\n  \n\n\nIn the above case, it was specified that we wanted R to return us a dataset that had an n of 10, a mean of 10, and a standard deviation of 1.\nThere are some instances of preference when it comes to data generation,but I prefer the data to look a bit cleaner so I will usually:\n\nround the data so that there are two decimal places after the 0\n\nWe can do this by wrapping the round function around our rnorm function. round has one argument, digits=n, where n is the number of digits you would like to round to. In practice it should look like this:\n\n\nLoading\n  webR...\n\n\n  \n\n\n\nexclude numbers below 0 from the data.\n\nLoading\n  webR...\n\n\n  \n\n\nTry it out: Make a variable called y and make sure that it has 30 observations, a mean of 5, and a standard deviation of 5. Make sure that the data is rounded to 0 decimal places and does not include any value greater than 100 or less than 0.\nLoading\n  webR...\n\n\n  \n\n\nWe can now assume that data we have generated could have come from a class that just recently took a test. What we would like to do next is find out some of the generalities of this data.\n\n\nDescriptive Statistics\n\nWhat is the average score?\nWhat score is right in the middle?\nWhat is the range of scores?\n\nWe can do this using the mean, median, and range functions.\nAll of these functions work by placing the object or variable you are looking to get descriptive data from.\nWhen you are dealing with ‘real data’ you should make sure to give the dataset a descriptive name so you understand what you are working with. Let us rename the variable y to be called testscores instead.\nLoading\n  webR...\n\n\n  \n\n\nNow that we have workable data we can start to look its properties.\nLoading\n  webR...\n\n\n  \n\n\nLoading\n  webR...\n\n\n  \n\n\nLoading\n  webR...\n\n\n  \n\n\nWe can see that we have a mean of 79.12, a median of 79, and a range of 17.\nIn addition to using these three functions to extract summary data, we can use another function aptly named summary. This function returns the above three values as well as two additional values referencing datapoints in the 1st and 3rd quadrants.\nThe summary function works by placing the variable you want to summarize inside the parentheses.\nLoading\n  webR...\n\n\n  \n\n\nIt might also be helpful for us to see what the standard deviation is for this dataset. We can do this by using the sd function.\nLoading\n  webR...\n\n\n  \n\n\nWe now have the ability to tell this professor that the average grade of her students was 79.12, and the standard deviation was 4.94402.\nThis should not be too surprising to us seeing as how we designated the properties of this data set when we used our first rnormfunction!\n\n\n\n\n\n\nNote\n\n\n\nTry it out: Get the summary data for the following data:\n\n\nLoading\n  webR..."
  },
  {
    "objectID": "string.html#some-primer-on-why-regex-is-useful",
    "href": "string.html#some-primer-on-why-regex-is-useful",
    "title": "String Manipulation",
    "section": "Some primer on why regex is useful",
    "text": "Some primer on why regex is useful\nLoading\n  webR...\n\n\n  \n\n\nLoading\n  webR...\n\n\n  \n\n\n\nCase Manipulation\nLoading\n  webR...\n\n\n  \n\n\nLoading\n  webR...\n\n\n  \n\n\nLoading\n  webR...\n\n\n  \n\n\nLoading\n  webR...\n\n\n  \n\n\nIt might be of interest to see how long the sentence is in terms of how many letters each word is\nLoading\n  webR...\n\n\n  \n\n\nNow the sentence is a string vector, so the str_length function will vectorize it\nLoading\n  webR...\n\n\n  \n\n\n\n\nString Manipulation\nLoading\n  webR...\n\n\n  \n\n\nLoading\n  webR...\n\n\n  \n\n\nLoading\n  webR...\n\n\n  \n\n\nLoading\n  webR...\n\n\n  \n\n\nLoading\n  webR...\n\n\n  \n\n\n\n\nRegular Expression Glossary:\n\nLooking for numbers\n\\\\d and [0-9]\n\nExample:\nLoading\n  webR...\n\n\n  \n\n\n\n\n\nLooking for boundary character\n\\\\b\n\nExample:\nLoading\n  webR...\n\n\n  \n\n\nLoading\n  webR...\n\n\n  \n\n\n\n\n\nLooking for word characters\n\\\\w\n\nExample:\nLoading\n  webR...\n\n\n  \n\n\n\n\n\nLook for characters in the range of a-z (case-sensitive)\n[a-z]\n\nExample:\nLoading\n  webR...\n\n\n  \n\n\nLoading\n  webR...\n\n\n  \n\n\nLoading\n  webR...\n\n\n  \n\n\n\n\n\nLook for characters in the range of A-Z (case-sensitive)\n[A-Z]\n\n\nLook for characters in the range of A-Z and a-z (case-sensitive)\n[aA-zZ]\n\n\nMatch your pattern exactly n times\n{n}\n\n\nMatch your pattern &gt;= n\n{n,}\n\n\nMatch your pattern between n and k times\n{n,k}\n\nExample:\nLoading\n  webR...\n\n\n  \n\n\nLoading\n  webR...\n\n\n  \n\n\nLoading\n  webR...\n\n\n  \n\n\n\n\n\nKeep matching until you encounter a new pattern\n+\nLoading\n  webR...\n\n\n  \n\n\nLoading\n  webR...\n\n\n  \n\n\nLoading\n  webR...\n\n\n  \n\n\n\n\nMatch any character except for line break. Useful when you don’t know how many characters are in the pattern\n.\nLoading\n  webR...\n\n\n  \n\n\nLoading\n  webR...\n\n\n  \n\n\n\n\nMatch zero or more times\n*\nLoading\n  webR...\n\n\n  \n\n\n\n\nMatch start of a string\n^\n\nExample: WHY DOES THIS NOT WORK?\nLoading\n  webR...\n\n\n  \n\n\n\n\n\nMatch end of a string\n$\n\nExample:\nLoading\n  webR...\n\n\n  \n\n\nLoading\n  webR...\n\n\n  \n\n\n\n\n\n\nRegular Expressions\nReplace a word with something else, we will return the string into sentence format\nLoading\n  webR...\n\n\n  \n\n\nReplace any three letter word with “cake”\nLoading\n  webR...\n\n\n  \n\n\nLoading\n  webR...\n\n\n  \n\n\n\n\nRemove a pattern\nLoading\n  webR...\n\n\n  \n\n\nLoading\n  webR...\n\n\n  \n\n\n\n\nDetect\nDoes anything in your string match this pattern\nLoading\n  webR...\n\n\n  \n\n\nLoading\n  webR...\n\n\n  \n\n\n\n\nUsing stringi to generate passwords\nstri_rand_strings accepts the following arguments:\n\nn: The number of strings you want to make\nlength: The length of the string you want\npattern: The pattern you want to match\n\nLoading\n  webR...\n\n\n  \n\n\n\n\nString Manipulation: Use Cases - String Extraction\nImagine that you were given the following dataset:\nLoading\n  webR...\n\n\n  \n\n\nYour task is to extract just the numbers. You could do it one of two ways:\nLoading\n  webR...\n\n\n  \n\n\nLoading\n  webR...\n\n\n  \n\n\nBoth methods return the same values, but with fewer needed regular expressions to match in the second example"
  },
  {
    "objectID": "sample.html#random-sampling",
    "href": "sample.html#random-sampling",
    "title": "Sampling",
    "section": "Random Sampling",
    "text": "Random Sampling"
  },
  {
    "objectID": "sample.html#probability-sampling",
    "href": "sample.html#probability-sampling",
    "title": "Sampling",
    "section": "Probability Sampling",
    "text": "Probability Sampling"
  },
  {
    "objectID": "sample.html#cluster-sampling",
    "href": "sample.html#cluster-sampling",
    "title": "Sampling",
    "section": "Cluster Sampling",
    "text": "Cluster Sampling"
  },
  {
    "objectID": "sample.html#snowball-sampling",
    "href": "sample.html#snowball-sampling",
    "title": "Sampling",
    "section": "Snowball Sampling",
    "text": "Snowball Sampling"
  },
  {
    "objectID": "sample.html#stratified-sampling",
    "href": "sample.html#stratified-sampling",
    "title": "Sampling",
    "section": "Stratified Sampling",
    "text": "Stratified Sampling"
  },
  {
    "objectID": "sample.html#quota-sampling",
    "href": "sample.html#quota-sampling",
    "title": "Sampling",
    "section": "Quota Sampling",
    "text": "Quota Sampling"
  },
  {
    "objectID": "writing.html",
    "href": "writing.html",
    "title": "Writing",
    "section": "",
    "text": "Below are some links to Medium articles i have published that walk using shiny to make interactive visuals:"
  }
]